<<<<<<< HEAD
[{"/Users/sergejtkacuk/samurai/src/index.tsx":"1","/Users/sergejtkacuk/samurai/src/serviceWorker.ts":"2","/Users/sergejtkacuk/samurai/src/redux/redux.store.ts":"3","/Users/sergejtkacuk/samurai/src/App.tsx":"4","/Users/sergejtkacuk/samurai/src/redux/profile-reduser.ts":"5","/Users/sergejtkacuk/samurai/src/redux/dialogs-reduser.ts":"6","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogsContainer.ts":"7","/Users/sergejtkacuk/samurai/src/components/header/header.tsx":"8","/Users/sergejtkacuk/samurai/src/components/profile/Profile.tsx":"9","/Users/sergejtkacuk/samurai/src/components/navbar/Navbar.tsx":"10","/Users/sergejtkacuk/samurai/src/components/Dialogs/Dialogs.tsx":"11","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileInfo.tsx":"12","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPosts.tsx":"13","/Users/sergejtkacuk/samurai/src/components/Dialogs/Message/Message.tsx":"14","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogItem/DialogsItem.tsx":"15","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/Post/Post.tsx":"16","/Users/sergejtkacuk/samurai/src/redux/users-reduser.ts":"17","/Users/sergejtkacuk/samurai/src/components/users/UsersContainer.tsx":"18","/Users/sergejtkacuk/samurai/src/components/users/Users.tsx":"19","/Users/sergejtkacuk/samurai/src/components/common/Preloader.tsx":"20","/Users/sergejtkacuk/samurai/src/components/profile/ProfileContainer.tsx":"21","/Users/sergejtkacuk/samurai/src/redux/auth-reduser.ts":"22","/Users/sergejtkacuk/samurai/src/components/header/header.container.tsx":"23","/Users/sergejtkacuk/samurai/src/api/api.ts":"24","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPostsContainer.ts":"25","/Users/sergejtkacuk/samurai/src/components/login/Login.tsx":"26","/Users/sergejtkacuk/samurai/src/hoc/withAuthRedirect.tsx":"27","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileStatus.tsx":"28","/Users/sergejtkacuk/samurai/src/components/common/formsControl/FormsControl.tsx":"29","/Users/sergejtkacuk/samurai/src/utils/validators/validators.ts":"30","/Users/sergejtkacuk/samurai/src/redux/app-reduser.ts":"31","/Users/sergejtkacuk/samurai/src/redux/user-selectors.ts":"32","/Users/sergejtkacuk/samurai/src/chat/Chat.tsx":"33"},{"size":916,"mtime":1612922276675,"results":"34","hashOfConfig":"35"},{"size":5295,"mtime":1587586614000,"results":"36","hashOfConfig":"35"},{"size":772,"mtime":1611363081700,"results":"37","hashOfConfig":"35"},{"size":2440,"mtime":1612922129111,"results":"38","hashOfConfig":"35"},{"size":4405,"mtime":1612321527262,"results":"39","hashOfConfig":"35"},{"size":1589,"mtime":1610801852306,"results":"40","hashOfConfig":"35"},{"size":1419,"mtime":1610801953323,"results":"41","hashOfConfig":"35"},{"size":763,"mtime":1610936029166,"results":"42","hashOfConfig":"35"},{"size":591,"mtime":1610466232308,"results":"43","hashOfConfig":"35"},{"size":1275,"mtime":1612223752768,"results":"44","hashOfConfig":"35"},{"size":2262,"mtime":1610925174409,"results":"45","hashOfConfig":"35"},{"size":1127,"mtime":1612322962967,"results":"46","hashOfConfig":"35"},{"size":1632,"mtime":1610925438404,"results":"47","hashOfConfig":"35"},{"size":251,"mtime":1609018161794,"results":"48","hashOfConfig":"35"},{"size":406,"mtime":1609804936194,"results":"49","hashOfConfig":"35"},{"size":561,"mtime":1609017846893,"results":"50","hashOfConfig":"35"},{"size":5192,"mtime":1611521150318,"results":"51","hashOfConfig":"35"},{"size":3675,"mtime":1611580884793,"results":"52","hashOfConfig":"35"},{"size":2919,"mtime":1612272852849,"results":"53","hashOfConfig":"35"},{"size":378,"mtime":1611368040607,"results":"54","hashOfConfig":"35"},{"size":2511,"mtime":1611367085049,"results":"55","hashOfConfig":"35"},{"size":2083,"mtime":1612280988006,"results":"56","hashOfConfig":"35"},{"size":844,"mtime":1611360011250,"results":"57","hashOfConfig":"35"},{"size":1498,"mtime":1612322962961,"results":"58","hashOfConfig":"35"},{"size":691,"mtime":1610804751921,"results":"59","hashOfConfig":"35"},{"size":2145,"mtime":1611367901068,"results":"60","hashOfConfig":"35"},{"size":854,"mtime":1611368572464,"results":"61","hashOfConfig":"35"},{"size":2667,"mtime":1612308753341,"results":"62","hashOfConfig":"35"},{"size":896,"mtime":1610921803552,"results":"63","hashOfConfig":"35"},{"size":338,"mtime":1610924114199,"results":"64","hashOfConfig":"35"},{"size":1115,"mtime":1611366554513,"results":"65","hashOfConfig":"35"},{"size":767,"mtime":1611580884785,"results":"66","hashOfConfig":"35"},{"size":2417,"mtime":1612316914704,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wlm20o",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"72"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"72"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"72"},"/Users/sergejtkacuk/samurai/src/index.tsx",["151","152","153"],"/Users/sergejtkacuk/samurai/src/serviceWorker.ts",[],["154","155"],"/Users/sergejtkacuk/samurai/src/redux/redux.store.ts",[],"/Users/sergejtkacuk/samurai/src/App.tsx",["156","157"],"/Users/sergejtkacuk/samurai/src/redux/profile-reduser.ts",["158","159"],"import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\nimport {AuthPageType, setAuthUserData} from \"./auth-reduser\";\n\n\nexport type setUsersProfileType = {\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value: string\n}\n\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\n/*export type PhotosType = ReturnType<typeof updatePhotosAC>*/\n\nexport type ActionPageType =\n     |\n    AddPostActionType\n    | setUsersProfileType\n    | setStatusActionType\n    | updateStatusActionType\n\n\nexport type newProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType = {\n    profile: newProfileType | null\n\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType): newProfilePageType => {\n\n    switch (action.type) {\n\n\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value: string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType): setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status: string): setStatusActionType => ({\n    type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status: string): updateStatusActionType => ({\n    type: 'UPDATE_STATUS', status\n})\n/*\nexport const updatePhotosAC = (image: string) => ({type: 'UPDATE_PHOTOS', image} as const )\n*/\n\n\nexport default profileReducer\n\n\nexport const getUserProfile = (userId: string) => {\n\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n\n        userApi.getProfile(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus = (userId: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus = (status: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}\n\n/*export const updatePhotos = (image: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updatePhotos(image)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}*/\n\n\n","/Users/sergejtkacuk/samurai/src/redux/dialogs-reduser.ts",["160"],"import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\n\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n   // messagesForMessages: string\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    value\n\n})\n\n\n/*export const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})*/\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n  //  messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogsContainer.ts",[],"/Users/sergejtkacuk/samurai/src/components/header/header.tsx",["161"],"import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\nexport default Header","/Users/sergejtkacuk/samurai/src/components/profile/Profile.tsx",[],"/Users/sergejtkacuk/samurai/src/components/navbar/Navbar.tsx",["162","163","164"],"import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n            <div className={s.item}>\n                <NavLink to=\"/chat\" activeClassName={s.activeClassLink}>Chat</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","/Users/sergejtkacuk/samurai/src/components/Dialogs/Dialogs.tsx",["165"],"import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n    // isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n    /*if(!props.isAuth) return <Redirect to={\"/login\"}/>*/\n\n    /*const addMessage = ()=>{\n        props.addMessage()\n    }*/\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData.newMessageBody)\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\ntype FormDataType = {\n    newMessageBody: string\n}\nconst maxLength10=maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} validate={[maxLength10, required]} name={'newMessageBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileInfo.tsx",["166","167","168","169"],"import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appStateType} from \"../../../redux/redux.store\";\n\n\n\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n\n  //  const authId = useSelector<appStateType, string | undefined>(state => state.profilePage.profile?.photos.large)\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n\n            <div className={s.discriptionBlock}>\n       {/*        <div>{authId}</div> {authId}*/}\n                ava + discriphon\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPosts.tsx",["170"],"import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n\n\n\n\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n\n                <AddNewPostReduxForm onSubmit={addPost}/>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'}  validate={[maxLength20, required]}name={'newPostBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","/Users/sergejtkacuk/samurai/src/components/Dialogs/Message/Message.tsx",[],"/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogItem/DialogsItem.tsx",[],"/Users/sergejtkacuk/samurai/src/components/profile/Myposts/Post/Post.tsx",[],"/Users/sergejtkacuk/samurai/src/redux/users-reduser.ts",["171","172"],"import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {mapDispathToPropsType} from \"../components/users/UsersContainer\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglIsFetching(true))\n        dispatch(setCurrentPage(currentPage))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\n","/Users/sergejtkacuk/samurai/src/components/users/UsersContainer.tsx",[],"/Users/sergejtkacuk/samurai/src/components/users/Users.tsx",["173","174"],"import React from 'react';\nimport s from \"./Users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {userApi} from \"../../api/api\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    //  follow: (userid: string) => void\n    // UnFollow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    //toglFolowingInProgress:(isFetching: boolean, userId: string)=>void\n    // setCurrentPage: (pageNumber: number) => void\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    return <div>\n        <div>\n            {\n                pages.map(p => {\n                    return <span key={p} className={props.currentPage === p ? s.selectedPage : \"\"}\n                                 onClick={(e) => {\n                                     props.onPageChanged(p)\n                                 }}>{p}</span>\n                })}\n        </div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                       <img alt={'photo'} src={u.photos.small !== null ? u.photos.small : userPhoto}\n                            className={s.usersPhoto}/>\n                       </NavLink>\n                <div>\n                    {u.followed\n                        ? <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.unFolluwThunk(u.id)\n\n\n                        }}>unfollow</button>\n\n                        : <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.FolluwThunk(u.id)\n\n                        }}>follow</button>}\n                </div>\n            </div>\n   </span>\n                <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                   <div>{\"u.location.contry\"}</div>\n                   <div>{\"u.location.city\"}</div>\n               </span>\n            </span>\n            </div>)\n        }\n\n\n    </div>;\n\n\n}\n\n\nexport default Users","/Users/sergejtkacuk/samurai/src/components/common/Preloader.tsx",["175"],"import React from 'react';\nimport loader from \"../../assets/loading/loader.gif\";\n\n\n/*const Preloader=()=>{\n\n    return <img  src={loader} alt=''/>\n}\nexport default Preloader\n\n\nimport React from 'react';\nimport preloader from '../../15.gif';*/\n\n const Preloader = () => {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\nexport default Preloader\n","/Users/sergejtkacuk/samurai/src/components/profile/ProfileContainer.tsx",["176"],"import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, newProfileType, updateStatus} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {getUserProfile, getStatus, updateStatus}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","/Users/sergejtkacuk/samurai/src/redux/auth-reduser.ts",[],"/Users/sergejtkacuk/samurai/src/components/header/header.container.tsx",["177"],"import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logoutTC} from \"../../redux/auth-reduser\";\n\n\n\n\n\n\ntype mapStateToPropsType ={\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType= {\n\n    logoutTC : ()=>void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps,{\n    logoutTC}) (HeaderContainer)","/Users/sergejtkacuk/samurai/src/api/api.ts",[],"/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPostsContainer.ts",[],"/Users/sergejtkacuk/samurai/src/components/login/Login.tsx",[],"/Users/sergejtkacuk/samurai/src/hoc/withAuthRedirect.tsx",[],"/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileStatus.tsx",["178"],"import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n/*class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState( {\n            editMode: true\n        } );\n    }\n    deactivateEditMode() {\n        this.setState( {\n            editMode: false\n        } );\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status){\n            this.setState({\n                status: this.props.status\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={ this.activateEditMode }>{this.props.status || \"-------\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange}\n                           autoFocus={true}\n                           onBlur={ this.deactivateEditMode.bind(this) }\n                           value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}*/\n\nexport const ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)};\n\n        const deactivateEditMode = () => {\n            setEditMode(false)\n            props.updateStatus(status);\n        }\n\n        return (\n            <div>\n                {!editMode &&\n                <div>\n                    <span onDoubleClick={() => setEditMode(true)}>{props.status || \"-------\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}/>\n                </div>\n                }\n            </div>\n        )\n\n}\n","/Users/sergejtkacuk/samurai/src/components/common/formsControl/FormsControl.tsx",[],"/Users/sergejtkacuk/samurai/src/utils/validators/validators.ts",[],"/Users/sergejtkacuk/samurai/src/redux/app-reduser.ts",["179","180","181","182"],"import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport { stopSubmit } from 'redux-form';\nimport {AuthPageType, getAuthUserData} from \"./auth-reduser\";\n\nexport type initializedSucsessActionType = ReturnType<typeof initializedSucsessAction>\n\n\nexport const initializedSucsessAction = () => ({\n        type: \"INITIALIZED_SUCCESS\"} as const\n)\n\n\n\ntype appReducerType = {\n    initialized: boolean\n}\n\nlet initialState = {\n\n    initialized: false\n}\n\n\nconst appReducer = (state: appReducerType = initialState, action: initializedSucsessActionType): appReducerType => {\n\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\":{\n            return {\n                ...state,\n                initialized: true\n            }\n        }\n\n    }\n    return state\n\n}\n\n\nexport default appReducer\n\n\nexport const initializedApp = ()=>(dispatch: Dispatch<any>)=>{\n  const promise =  dispatch(getAuthUserData())\n  const promise1 =  dispatch(getAuthUserData())\n\n   /// promise.then(()=>{})???????????\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSucsessAction())\n        })\n}\n","/Users/sergejtkacuk/samurai/src/redux/user-selectors.ts",["183"],"import {appStateType} from \"./redux.store\";\nimport {createSelector} from \"reselect\";\n\n\nexport const getUsersS = (state: appStateType)=>{\n    return  state.usersPeges.users\n}\n/*export const getUsersSelector = createSelector(getUsersS,(...arg)=>{\n    return  users\n})*/\nexport const getPageSizeS = (state: appStateType)=>{\n    return  state.usersPeges.pageSize\n}\nexport const getTotalCountS = (state: appStateType)=>{\n    return  state.usersPeges.totalCount\n}\n\nexport const getCurrentPageS = (state: appStateType)=>{\n    return  state.usersPeges.currentPage\n}\nexport const getIsFetchingS = (state: appStateType)=>{\n    return  state.usersPeges.isFetching\n}\nexport const getFolowingInProgressS = (state: appStateType)=>{\n    return  state.usersPeges.folowingInProgress\n}","/Users/sergejtkacuk/samurai/src/chat/Chat.tsx",["184"],"import React, {ChangeEvent, useEffect, useRef, useState} from \"react\"\nimport s from './Chat.module.css'\nimport {useSelector} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\n\ntype UserType = {\n    message: string\n    photo: string | undefined\n    userId: number\n    userName: string\n}\n\nexport const Chat = function () {\n\n    const authId = useSelector<appStateType, number | null>(state => state.auth.id)\n\n    let [messange, setMessane] = useState('')\n    let [user, setUser] = useState<UserType[]>([])\n    let [ws, setWs] = useState<WebSocket>()\n\n    const h1Ref = useRef<HTMLHeadingElement>(null)\n\n\n// 3. в объекте вс приходит свойство onmessage в нем находится введеный текст\n// 4. сзздаем из него объект и делаем копью нового сообщения и с старых сообщений\n\n    if (ws) {\n        ws.onmessage = (messange) => {\n            debugger\n            let messages = JSON.parse(messange.data)\n            setUser([...user, ...messages])\n            if (h1Ref && h1Ref.current) {\n                h1Ref.current.scrollTo(0, h1Ref.current.scrollHeight)\n            }\n        }\n    }\n\n//1. делаем запрос в wss\n//2. если запрос пришел сетаем его\n    useEffect(() => {\n        let webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n        if (webSocket) {\n            setWs(webSocket)\n        }\n    }, [])\n\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessane(e.currentTarget.value)\n    }\n\n    const onMessange = () => {\n        if (ws) {\n            ws.send(messange)\n            setMessane('')\n        }\n    }\n\n    return (<div className={s.chat}>\n\n        <div>\n            <div ref={h1Ref} className={s.messanges}>\n                {user.map((u, index) => <div key={index} className={s.messange}>\n                        <img className={s.usersPhoto} src={u.photo}/><b><span\n                        className={u.userId === authId ? s.span2 : s.span}>{u.userName}</span></b>\n                        <span>{u.message}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n        <div>\n            <textarea value={messange} onChange={onMessageChange}/>\n            <button onClick={onMessange}>Send</button>\n        </div>\n\n\n    </div>)\n\n}\n\n",{"ruleId":"185","severity":1,"message":"186","line":1,"column":16,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"189","line":11,"column":8,"nodeType":"187","messageId":"188","endLine":11,"endColumn":10},{"ruleId":"185","severity":1,"message":"190","line":12,"column":9,"nodeType":"187","messageId":"188","endLine":12,"endColumn":19},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"185","severity":1,"message":"190","line":16,"column":9,"nodeType":"187","messageId":"188","endLine":16,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":40,"column":9,"nodeType":"197","messageId":"198","endLine":44,"endColumn":10},{"ruleId":"185","severity":1,"message":"199","line":7,"column":9,"nodeType":"187","messageId":"188","endLine":7,"endColumn":21},{"ruleId":"185","severity":1,"message":"200","line":7,"column":23,"nodeType":"187","messageId":"188","endLine":7,"endColumn":38},{"ruleId":"185","severity":1,"message":"201","line":4,"column":5,"nodeType":"187","messageId":"188","endLine":4,"endColumn":25},{"ruleId":"185","severity":1,"message":"202","line":4,"column":9,"nodeType":"187","messageId":"188","endLine":4,"endColumn":17},{"ruleId":"203","severity":1,"message":"204","line":29,"column":13,"nodeType":"205","endLine":29,"endColumn":16},{"ruleId":"203","severity":1,"message":"204","line":32,"column":13,"nodeType":"205","endLine":32,"endColumn":16},{"ruleId":"203","severity":1,"message":"204","line":35,"column":13,"nodeType":"205","endLine":35,"endColumn":16},{"ruleId":"185","severity":1,"message":"206","line":25,"column":11,"nodeType":"187","messageId":"188","endLine":25,"endColumn":24},{"ruleId":"185","severity":1,"message":"207","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":20},{"ruleId":"185","severity":1,"message":"208","line":6,"column":22,"nodeType":"187","messageId":"188","endLine":6,"endColumn":33},{"ruleId":"185","severity":1,"message":"209","line":7,"column":9,"nodeType":"187","messageId":"188","endLine":7,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":36,"column":17,"nodeType":"205","endLine":36,"endColumn":56},{"ruleId":"185","severity":1,"message":"212","line":1,"column":16,"nodeType":"187","messageId":"188","endLine":1,"endColumn":27},{"ruleId":"185","severity":1,"message":"213","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":30},{"ruleId":"214","severity":1,"message":"215","line":86,"column":64,"nodeType":"216","messageId":"217","endLine":86,"endColumn":66},{"ruleId":"185","severity":1,"message":"218","line":5,"column":9,"nodeType":"187","messageId":"188","endLine":5,"endColumn":16},{"ruleId":"219","severity":1,"message":"220","line":66,"column":24,"nodeType":"205","endLine":67,"endColumn":55},{"ruleId":"210","severity":1,"message":"211","line":18,"column":13,"nodeType":"205","endLine":18,"endColumn":32},{"ruleId":"185","severity":1,"message":"221","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":17},{"ruleId":"185","severity":1,"message":"222","line":5,"column":9,"nodeType":"187","messageId":"188","endLine":5,"endColumn":24},{"ruleId":"185","severity":1,"message":"223","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":9},{"ruleId":"185","severity":1,"message":"224","line":1,"column":9,"nodeType":"187","messageId":"188","endLine":1,"endColumn":16},{"ruleId":"185","severity":1,"message":"225","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":20},{"ruleId":"185","severity":1,"message":"199","line":4,"column":9,"nodeType":"187","messageId":"188","endLine":4,"endColumn":21},{"ruleId":"185","severity":1,"message":"226","line":46,"column":9,"nodeType":"187","messageId":"188","endLine":46,"endColumn":17},{"ruleId":"185","severity":1,"message":"227","line":2,"column":9,"nodeType":"187","messageId":"188","endLine":2,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":63,"column":25,"nodeType":"205","endLine":63,"endColumn":70},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'me' is defined but never used.","'profileAPI' is defined but never used.","no-native-reassign",["228"],"no-negated-in-lhs",["229"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'AuthPageType' is defined but never used.","'setAuthUserData' is defined but never used.","'UpdateNewMessageType' is defined but never used.","'logoutTC' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'changeHandler' is assigned a value but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'appStateType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ChangeEvent' is defined but never used.","'mapDispathToPropsType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'userApi' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Redirect' is defined but never used.","'getAuthUserData' is defined but never used.","'s' is defined but never used.","'authAPI' is defined but never used.","'stopSubmit' is defined but never used.","'promise1' is assigned a value but never used.","'createSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"/Users/sergejtkacuk/samurai/src/index.tsx":"1","/Users/sergejtkacuk/samurai/src/serviceWorker.ts":"2","/Users/sergejtkacuk/samurai/src/redux/redux.store.ts":"3","/Users/sergejtkacuk/samurai/src/App.tsx":"4","/Users/sergejtkacuk/samurai/src/redux/auth-reduser.ts":"5","/Users/sergejtkacuk/samurai/src/redux/users-reduser.ts":"6","/Users/sergejtkacuk/samurai/src/redux/app-reduser.ts":"7","/Users/sergejtkacuk/samurai/src/redux/profile-reduser.ts":"8","/Users/sergejtkacuk/samurai/src/redux/dialogs-reduser.ts":"9","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogsContainer.ts":"10","/Users/sergejtkacuk/samurai/src/chat/Chat.tsx":"11","/Users/sergejtkacuk/samurai/src/components/profile/ProfileContainer.tsx":"12","/Users/sergejtkacuk/samurai/src/components/header/header.container.tsx":"13","/Users/sergejtkacuk/samurai/src/components/navbar/Navbar.tsx":"14","/Users/sergejtkacuk/samurai/src/components/common/Preloader.tsx":"15","/Users/sergejtkacuk/samurai/src/components/login/Login.tsx":"16","/Users/sergejtkacuk/samurai/src/components/users/UsersContainer.tsx":"17","/Users/sergejtkacuk/samurai/src/api/api.ts":"18","/Users/sergejtkacuk/samurai/src/redux/user-selectors.ts":"19","/Users/sergejtkacuk/samurai/src/components/Dialogs/Dialogs.tsx":"20","/Users/sergejtkacuk/samurai/src/hoc/withAuthRedirect.tsx":"21","/Users/sergejtkacuk/samurai/src/components/header/header.tsx":"22","/Users/sergejtkacuk/samurai/src/components/profile/Profile.tsx":"23","/Users/sergejtkacuk/samurai/src/utils/validators/validators.ts":"24","/Users/sergejtkacuk/samurai/src/components/users/Users.tsx":"25","/Users/sergejtkacuk/samurai/src/components/common/formsControl/FormsControl.tsx":"26","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPostsContainer.ts":"27","/Users/sergejtkacuk/samurai/src/components/Dialogs/Message/Message.tsx":"28","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogItem/DialogsItem.tsx":"29","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileInfo.tsx":"30","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPosts.tsx":"31","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileStatus.tsx":"32","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/Post/Post.tsx":"33"},{"size":803,"mtime":1613229419977,"results":"34","hashOfConfig":"35"},{"size":5295,"mtime":1613222037142,"results":"36","hashOfConfig":"35"},{"size":772,"mtime":1613222037139,"results":"37","hashOfConfig":"35"},{"size":2319,"mtime":1613222117645,"results":"38","hashOfConfig":"35"},{"size":2083,"mtime":1613222037134,"results":"39","hashOfConfig":"35"},{"size":5192,"mtime":1613222037141,"results":"40","hashOfConfig":"35"},{"size":1115,"mtime":1613222037132,"results":"41","hashOfConfig":"35"},{"size":4405,"mtime":1613222037138,"results":"42","hashOfConfig":"35"},{"size":1589,"mtime":1613222037136,"results":"43","hashOfConfig":"35"},{"size":1419,"mtime":1613222037116,"results":"44","hashOfConfig":"35"},{"size":2417,"mtime":1613222037114,"results":"45","hashOfConfig":"35"},{"size":2511,"mtime":1613222037125,"results":"46","hashOfConfig":"35"},{"size":844,"mtime":1613222037119,"results":"47","hashOfConfig":"35"},{"size":1275,"mtime":1613222037121,"results":"48","hashOfConfig":"35"},{"size":378,"mtime":1613222037117,"results":"49","hashOfConfig":"35"},{"size":2145,"mtime":1613222037120,"results":"50","hashOfConfig":"35"},{"size":3675,"mtime":1613222037129,"results":"51","hashOfConfig":"35"},{"size":1498,"mtime":1613222037103,"results":"52","hashOfConfig":"35"},{"size":767,"mtime":1613222037140,"results":"53","hashOfConfig":"35"},{"size":2262,"mtime":1613222037116,"results":"54","hashOfConfig":"35"},{"size":854,"mtime":1613222037129,"results":"55","hashOfConfig":"35"},{"size":763,"mtime":1613222037120,"results":"56","hashOfConfig":"35"},{"size":591,"mtime":1613222037125,"results":"57","hashOfConfig":"35"},{"size":338,"mtime":1613222037145,"results":"58","hashOfConfig":"35"},{"size":2919,"mtime":1613225129653,"results":"59","hashOfConfig":"35"},{"size":896,"mtime":1613222037118,"results":"60","hashOfConfig":"35"},{"size":691,"mtime":1613222037123,"results":"61","hashOfConfig":"35"},{"size":251,"mtime":1613222037117,"results":"62","hashOfConfig":"35"},{"size":406,"mtime":1613222037115,"results":"63","hashOfConfig":"35"},{"size":1127,"mtime":1613222037126,"results":"64","hashOfConfig":"35"},{"size":1632,"mtime":1613222037122,"results":"65","hashOfConfig":"35"},{"size":2667,"mtime":1613222037127,"results":"66","hashOfConfig":"35"},{"size":561,"mtime":1613222037124,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wlm20o",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"72"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"72"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"72"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"/Users/sergejtkacuk/samurai/src/index.tsx",["154"],"/Users/sergejtkacuk/samurai/src/serviceWorker.ts",[],["155","156"],"/Users/sergejtkacuk/samurai/src/redux/redux.store.ts",[],"/Users/sergejtkacuk/samurai/src/App.tsx",["157"],"import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainet from \"./components/users/UsersContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport HeaderContainer from \"./components/header/header.container\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"./redux/redux.store\";\nimport {compose} from \"redux\";\nimport {initializedApp} from \"./redux/app-reduser\";\nimport Preloader from \"./components/common/Preloader\";\nimport {Chat} from \"./chat/Chat\";\n\n\n\ntype mapDispathToPropsType = {\n    initializedApp: () => void\n}\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\n\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass App extends React.Component<HeaderPropsType> {\n\n\n    componentDidMount() {\n        this.props.initializedApp()\n\n    }\n\n    render() {\n\n        {\n            if (!this.props.initialized) {\n                return <Preloader/>\n            }\n        }\n\n\n        return (\n\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainet/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/chat' render={() => <Chat/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n\n        initialized: state.app.initialized\n    }\n}\n\n\n/*export default compose(withRouter, connect(null,{\n    getAuthUserData})) (App)*/\n/*type PathParamsType = {\n    param1: string,\n}\n\n// Your component own properties\ntype PropsType = RouteComponentProps<PathParamsType> & {\n    someString: string,\n}*/\n\n\nexport default compose(/*withRouter*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    initializedApp\n}))(App)","/Users/sergejtkacuk/samurai/src/redux/auth-reduser.ts",[],"/Users/sergejtkacuk/samurai/src/redux/users-reduser.ts",["158","159"],"import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {mapDispathToPropsType} from \"../components/users/UsersContainer\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglIsFetching(true))\n        dispatch(setCurrentPage(currentPage))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\n","/Users/sergejtkacuk/samurai/src/redux/app-reduser.ts",["160","161","162","163"],"import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport { stopSubmit } from 'redux-form';\nimport {AuthPageType, getAuthUserData} from \"./auth-reduser\";\n\nexport type initializedSucsessActionType = ReturnType<typeof initializedSucsessAction>\n\n\nexport const initializedSucsessAction = () => ({\n        type: \"INITIALIZED_SUCCESS\"} as const\n)\n\n\n\ntype appReducerType = {\n    initialized: boolean\n}\n\nlet initialState = {\n\n    initialized: false\n}\n\n\nconst appReducer = (state: appReducerType = initialState, action: initializedSucsessActionType): appReducerType => {\n\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\":{\n            return {\n                ...state,\n                initialized: true\n            }\n        }\n\n    }\n    return state\n\n}\n\n\nexport default appReducer\n\n\nexport const initializedApp = ()=>(dispatch: Dispatch<any>)=>{\n  const promise =  dispatch(getAuthUserData())\n  const promise1 =  dispatch(getAuthUserData())\n\n   /// promise.then(()=>{})???????????\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSucsessAction())\n        })\n}\n","/Users/sergejtkacuk/samurai/src/redux/profile-reduser.ts",["164","165"],"import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\nimport {AuthPageType, setAuthUserData} from \"./auth-reduser\";\n\n\nexport type setUsersProfileType = {\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value: string\n}\n\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\n/*export type PhotosType = ReturnType<typeof updatePhotosAC>*/\n\nexport type ActionPageType =\n     |\n    AddPostActionType\n    | setUsersProfileType\n    | setStatusActionType\n    | updateStatusActionType\n\n\nexport type newProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType = {\n    profile: newProfileType | null\n\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType): newProfilePageType => {\n\n    switch (action.type) {\n\n\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value: string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType): setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status: string): setStatusActionType => ({\n    type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status: string): updateStatusActionType => ({\n    type: 'UPDATE_STATUS', status\n})\n/*\nexport const updatePhotosAC = (image: string) => ({type: 'UPDATE_PHOTOS', image} as const )\n*/\n\n\nexport default profileReducer\n\n\nexport const getUserProfile = (userId: string) => {\n\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n\n        userApi.getProfile(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus = (userId: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus = (status: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}\n\n/*export const updatePhotos = (image: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updatePhotos(image)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}*/\n\n\n","/Users/sergejtkacuk/samurai/src/redux/dialogs-reduser.ts",["166"],"import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\n\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n   // messagesForMessages: string\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    value\n\n})\n\n\n/*export const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})*/\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n  //  messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogsContainer.ts",[],"/Users/sergejtkacuk/samurai/src/chat/Chat.tsx",["167"],"import React, {ChangeEvent, useEffect, useRef, useState} from \"react\"\nimport s from './Chat.module.css'\nimport {useSelector} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\n\ntype UserType = {\n    message: string\n    photo: string | undefined\n    userId: number\n    userName: string\n}\n\nexport const Chat = function () {\n\n    const authId = useSelector<appStateType, number | null>(state => state.auth.id)\n\n    let [messange, setMessane] = useState('')\n    let [user, setUser] = useState<UserType[]>([])\n    let [ws, setWs] = useState<WebSocket>()\n\n    const h1Ref = useRef<HTMLHeadingElement>(null)\n\n\n// 3. в объекте вс приходит свойство onmessage в нем находится введеный текст\n// 4. сзздаем из него объект и делаем копью нового сообщения и с старых сообщений\n\n    if (ws) {\n        ws.onmessage = (messange) => {\n            debugger\n            let messages = JSON.parse(messange.data)\n            setUser([...user, ...messages])\n            if (h1Ref && h1Ref.current) {\n                h1Ref.current.scrollTo(0, h1Ref.current.scrollHeight)\n            }\n        }\n    }\n\n//1. делаем запрос в wss\n//2. если запрос пришел сетаем его\n    useEffect(() => {\n        let webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n        if (webSocket) {\n            setWs(webSocket)\n        }\n    }, [])\n\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessane(e.currentTarget.value)\n    }\n\n    const onMessange = () => {\n        if (ws) {\n            ws.send(messange)\n            setMessane('')\n        }\n    }\n\n    return (<div className={s.chat}>\n\n        <div>\n            <div ref={h1Ref} className={s.messanges}>\n                {user.map((u, index) => <div key={index} className={s.messange}>\n                        <img className={s.usersPhoto} src={u.photo}/><b><span\n                        className={u.userId === authId ? s.span2 : s.span}>{u.userName}</span></b>\n                        <span>{u.message}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n        <div>\n            <textarea value={messange} onChange={onMessageChange}/>\n            <button onClick={onMessange}>Send</button>\n        </div>\n\n\n    </div>)\n\n}\n\n","/Users/sergejtkacuk/samurai/src/components/profile/ProfileContainer.tsx",["168"],"import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, newProfileType, updateStatus} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {getUserProfile, getStatus, updateStatus}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","/Users/sergejtkacuk/samurai/src/components/header/header.container.tsx",["169"],"import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logoutTC} from \"../../redux/auth-reduser\";\n\n\n\n\n\n\ntype mapStateToPropsType ={\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType= {\n\n    logoutTC : ()=>void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps,{\n    logoutTC}) (HeaderContainer)","/Users/sergejtkacuk/samurai/src/components/navbar/Navbar.tsx",["170","171","172"],"import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n            <div className={s.item}>\n                <NavLink to=\"/chat\" activeClassName={s.activeClassLink}>Chat</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","/Users/sergejtkacuk/samurai/src/components/common/Preloader.tsx",["173"],"import React from 'react';\nimport loader from \"../../assets/loading/loader.gif\";\n\n\n/*const Preloader=()=>{\n\n    return <img  src={loader} alt=''/>\n}\nexport default Preloader\n\n\nimport React from 'react';\nimport preloader from '../../15.gif';*/\n\n const Preloader = () => {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\nexport default Preloader\n","/Users/sergejtkacuk/samurai/src/components/login/Login.tsx",[],"/Users/sergejtkacuk/samurai/src/components/users/UsersContainer.tsx",[],"/Users/sergejtkacuk/samurai/src/api/api.ts",["174"],"import axios from \"axios\";\n\nimport ss from '../assets/images/user.png'\n\n\nconst instance= axios.create({\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers:{\n        \"API-KEY\": \"7866738e-c5bf-440e-864d-4cc467150876\"\n    }\n})\n\n\nexport const userApi = {\n    getUsers(currentPage: number, pageSize:number){\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n    },\n    getUnFollow(id: number){\n     return  instance.delete(`follow/${id}`)\n\n    },\n    getFollow(id: number){\n        return  instance.post(`follow/${id}`)\n\n    },\n    getProfile(userId: number){\n        console.warn('Obsolete method')\n        return  profileAPI.getProfile(userId)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: number){\n        return  instance.get(`profile/` + userId)\n    },\n    getStatus(userId: number){\n        return  instance.get(`profile/status/`+ userId )\n    },\n    updateStatus(status: string){\n        return instance.put(`profile/status`, { status: status }, );\n    },\n    updatePhotos(image: string){\n        return instance.put(`profile/photo`, {image: image})\n    }\n}\n/*debugger\nprofileAPI.updatePhotos(ss)*/\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post(`/auth/login`, {email ,password, rememberMe })\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}","/Users/sergejtkacuk/samurai/src/redux/user-selectors.ts",["175"],"import {appStateType} from \"./redux.store\";\nimport {createSelector} from \"reselect\";\n\n\nexport const getUsersS = (state: appStateType)=>{\n    return  state.usersPeges.users\n}\n/*export const getUsersSelector = createSelector(getUsersS,(...arg)=>{\n    return  users\n})*/\nexport const getPageSizeS = (state: appStateType)=>{\n    return  state.usersPeges.pageSize\n}\nexport const getTotalCountS = (state: appStateType)=>{\n    return  state.usersPeges.totalCount\n}\n\nexport const getCurrentPageS = (state: appStateType)=>{\n    return  state.usersPeges.currentPage\n}\nexport const getIsFetchingS = (state: appStateType)=>{\n    return  state.usersPeges.isFetching\n}\nexport const getFolowingInProgressS = (state: appStateType)=>{\n    return  state.usersPeges.folowingInProgress\n}","/Users/sergejtkacuk/samurai/src/components/Dialogs/Dialogs.tsx",["176"],"import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n    // isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n    /*if(!props.isAuth) return <Redirect to={\"/login\"}/>*/\n\n    /*const addMessage = ()=>{\n        props.addMessage()\n    }*/\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData.newMessageBody)\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\ntype FormDataType = {\n    newMessageBody: string\n}\nconst maxLength10=maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} validate={[maxLength10, required]} name={'newMessageBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","/Users/sergejtkacuk/samurai/src/hoc/withAuthRedirect.tsx",[],"/Users/sergejtkacuk/samurai/src/components/header/header.tsx",["177"],"import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\nexport default Header","/Users/sergejtkacuk/samurai/src/components/profile/Profile.tsx",[],"/Users/sergejtkacuk/samurai/src/utils/validators/validators.ts",[],"/Users/sergejtkacuk/samurai/src/components/users/Users.tsx",["178","179"],"import React from 'react';\nimport s from \"./Users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {userApi} from \"../../api/api\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    //  follow: (userid: string) => void\n    // UnFollow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    //toglFolowingInProgress:(isFetching: boolean, userId: string)=>void\n    // setCurrentPage: (pageNumber: number) => void\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    return <div>\n        <div>\n            {\n                pages.map(p => {\n                    return <span key={p} className={props.currentPage === p ? s.selectedPage : \"\"}\n                                 onClick={(e) => {\n                                     props.onPageChanged(p)\n                                 }}>{p}</span>\n                })}\n        </div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                       <img alt={'photo'} src={u.photos.small !== null ? u.photos.small : userPhoto}\n                            className={s.usersPhoto}/>\n                       </NavLink>\n                <div>\n                    {u.followed\n                        ? <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.unFolluwThunk(u.id)\n\n\n                        }}>unfollow</button>\n\n                        : <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.FolluwThunk(u.id)\n\n                        }}>follow</button>}\n                </div>\n            </div>\n   </span>\n                <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                   <div>{\"u.location.contry\"}</div>\n                   <div>{\"u.location.city\"}</div>\n               </span>\n            </span>\n            </div>)\n        }\n\n\n    </div>;\n\n\n}\n\n\nexport default Users","/Users/sergejtkacuk/samurai/src/components/common/formsControl/FormsControl.tsx",[],"/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPostsContainer.ts",[],"/Users/sergejtkacuk/samurai/src/components/Dialogs/Message/Message.tsx",[],"/Users/sergejtkacuk/samurai/src/components/Dialogs/DialogItem/DialogsItem.tsx",[],"/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileInfo.tsx",["180","181","182","183"],"import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appStateType} from \"../../../redux/redux.store\";\n\n\n\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n\n  //  const authId = useSelector<appStateType, string | undefined>(state => state.profilePage.profile?.photos.large)\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n\n            <div className={s.discriptionBlock}>\n       {/*        <div>{authId}</div> {authId}*/}\n                ava + discriphon\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/MyPosts.tsx",["184"],"import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n\n\n\n\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n\n                <AddNewPostReduxForm onSubmit={addPost}/>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'}  validate={[maxLength20, required]}name={'newPostBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","/Users/sergejtkacuk/samurai/src/components/profile/ProfileInfo/ProfileStatus.tsx",["185"],"import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n/*class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState( {\n            editMode: true\n        } );\n    }\n    deactivateEditMode() {\n        this.setState( {\n            editMode: false\n        } );\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status){\n            this.setState({\n                status: this.props.status\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={ this.activateEditMode }>{this.props.status || \"-------\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange}\n                           autoFocus={true}\n                           onBlur={ this.deactivateEditMode.bind(this) }\n                           value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}*/\n\nexport const ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)};\n\n        const deactivateEditMode = () => {\n            setEditMode(false)\n            props.updateStatus(status);\n        }\n\n        return (\n            <div>\n                {!editMode &&\n                <div>\n                    <span onDoubleClick={() => setEditMode(true)}>{props.status || \"-------\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}/>\n                </div>\n                }\n            </div>\n        )\n\n}\n","/Users/sergejtkacuk/samurai/src/components/profile/Myposts/Post/Post.tsx",[],["186","187"],{"ruleId":"188","severity":1,"message":"189","line":1,"column":16,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":41,"column":9,"nodeType":"198","messageId":"199","endLine":45,"endColumn":10},{"ruleId":"188","severity":1,"message":"200","line":3,"column":9,"nodeType":"190","messageId":"191","endLine":3,"endColumn":30},{"ruleId":"201","severity":1,"message":"202","line":86,"column":64,"nodeType":"203","messageId":"204","endLine":86,"endColumn":66},{"ruleId":"188","severity":1,"message":"205","line":1,"column":9,"nodeType":"190","messageId":"191","endLine":1,"endColumn":16},{"ruleId":"188","severity":1,"message":"206","line":3,"column":10,"nodeType":"190","messageId":"191","endLine":3,"endColumn":20},{"ruleId":"188","severity":1,"message":"207","line":4,"column":9,"nodeType":"190","messageId":"191","endLine":4,"endColumn":21},{"ruleId":"188","severity":1,"message":"208","line":46,"column":9,"nodeType":"190","messageId":"191","endLine":46,"endColumn":17},{"ruleId":"188","severity":1,"message":"207","line":7,"column":9,"nodeType":"190","messageId":"191","endLine":7,"endColumn":21},{"ruleId":"188","severity":1,"message":"209","line":7,"column":23,"nodeType":"190","messageId":"191","endLine":7,"endColumn":38},{"ruleId":"188","severity":1,"message":"210","line":4,"column":5,"nodeType":"190","messageId":"191","endLine":4,"endColumn":25},{"ruleId":"211","severity":1,"message":"212","line":63,"column":25,"nodeType":"213","endLine":63,"endColumn":70},{"ruleId":"188","severity":1,"message":"214","line":6,"column":9,"nodeType":"190","messageId":"191","endLine":6,"endColumn":17},{"ruleId":"188","severity":1,"message":"215","line":5,"column":9,"nodeType":"190","messageId":"191","endLine":5,"endColumn":24},{"ruleId":"216","severity":1,"message":"217","line":29,"column":13,"nodeType":"213","endLine":29,"endColumn":16},{"ruleId":"216","severity":1,"message":"217","line":32,"column":13,"nodeType":"213","endLine":32,"endColumn":16},{"ruleId":"216","severity":1,"message":"217","line":35,"column":13,"nodeType":"213","endLine":35,"endColumn":16},{"ruleId":"211","severity":1,"message":"212","line":18,"column":13,"nodeType":"213","endLine":18,"endColumn":32},{"ruleId":"188","severity":1,"message":"218","line":3,"column":8,"nodeType":"190","messageId":"191","endLine":3,"endColumn":10},{"ruleId":"188","severity":1,"message":"219","line":2,"column":9,"nodeType":"190","messageId":"191","endLine":2,"endColumn":23},{"ruleId":"188","severity":1,"message":"220","line":25,"column":11,"nodeType":"190","messageId":"191","endLine":25,"endColumn":24},{"ruleId":"188","severity":1,"message":"221","line":4,"column":9,"nodeType":"190","messageId":"191","endLine":4,"endColumn":17},{"ruleId":"188","severity":1,"message":"222","line":5,"column":9,"nodeType":"190","messageId":"191","endLine":5,"endColumn":16},{"ruleId":"223","severity":1,"message":"224","line":66,"column":24,"nodeType":"213","endLine":67,"endColumn":55},{"ruleId":"188","severity":1,"message":"225","line":6,"column":9,"nodeType":"190","messageId":"191","endLine":6,"endColumn":20},{"ruleId":"188","severity":1,"message":"226","line":6,"column":22,"nodeType":"190","messageId":"191","endLine":6,"endColumn":33},{"ruleId":"188","severity":1,"message":"227","line":7,"column":9,"nodeType":"190","messageId":"191","endLine":7,"endColumn":21},{"ruleId":"211","severity":1,"message":"212","line":36,"column":17,"nodeType":"213","endLine":36,"endColumn":56},{"ruleId":"188","severity":1,"message":"228","line":1,"column":16,"nodeType":"190","messageId":"191","endLine":1,"endColumn":27},{"ruleId":"188","severity":1,"message":"229","line":2,"column":8,"nodeType":"190","messageId":"191","endLine":2,"endColumn":9},{"ruleId":"192","replacedBy":"230"},{"ruleId":"194","replacedBy":"231"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["232"],"no-negated-in-lhs",["233"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'mapDispathToPropsType' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'authAPI' is defined but never used.","'stopSubmit' is defined but never used.","'AuthPageType' is defined but never used.","'promise1' is assigned a value but never used.","'setAuthUserData' is defined but never used.","'UpdateNewMessageType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Redirect' is defined but never used.","'getAuthUserData' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ss' is defined but never used.","'createSelector' is defined but never used.","'changeHandler' is assigned a value but never used.","'logoutTC' is defined but never used.","'userApi' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'appStateType' is defined but never used.","'ChangeEvent' is defined but never used.","'s' is defined but never used.",["232"],["233"],"no-global-assign","no-unsafe-negation"]
>>>>>>> remotes/origin/123
