{"version":3,"sources":["components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/Myposts/Post/Post.module.css","components/navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","components/navbar/Navbar.tsx","redux/dialogs-reduser.ts","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/formsControl/FormsControl.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.ts","api/api.ts","redux/users-reduser.ts","assets/images/user.png","components/users/Users.tsx","assets/loading/loader.gif","components/common/Preloader.tsx","components/users/UsersContainer.tsx","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","redux/profile-reduser.ts","components/profile/Myposts/MyPostsContainer.ts","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/header/header.tsx","redux/auth-reduser.ts","components/header/header.container.tsx","components/login/Login.tsx","App.tsx","redux/redux.store.ts","index.tsx","components/common/formsControl/FormsControl.module.css","components/users/Users.module.css","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","activeClassLink","initialState","dialogs","id","v1","name","messages","message","dialogsReducer","state","action","type","text","value","DialogItem","props","dialog","active","Message","required","maxLength","length","Input","input","meta","children","hasError","touched","error","formControl","TextArea","Dialogs","messageElements","dialogsPage","map","m","dialogsElements","d","dialogsItems","AddMessageReduxForm","onSubmit","formData","console","log","newMessageBody","addMessage","maxLength10","reduxForm","form","handleSubmit","Field","placeholder","validate","component","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","compose","dispatch","addMessageActoinCreator","instance","axios","create","baseURL","withCredentials","headers","userApi","currentPage","pageSize","get","delete","post","userId","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","users","totalCount","isFetching","folowingInProgress","usersReducer","u","userid","followed","filter","setTotalUsersCount","toglIsFetching","toglFolowingInProgress","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","onClick","e","onPageChanged","alt","src","photos","small","userPhoto","usersPhoto","disabled","folowingInProgres","some","unFolluwThunk","FolluwThunk","Preloader","loader","UsersContainet","pageNumber","getUsersThunk","setCurrentPage","this","React","usersPeges","then","response","data","items","resultCode","ProfileStatus","editMode","activateEditMode","setState","onStatusChange","currentTarget","prevProps","prevState","snapshot","onDoubleClick","onChange","autoFocus","onBlur","deactivateEditMode","bind","Profileinfo","profile","discriptionBlock","fullName","large","Post","likekounts","MyPosts","postsElements","posts","postsBlock","AddNewPostReduxForm","addPost","newPostBody","maxLength20","profileReducer","newPost","MyPostsContainer","profilePage","addPostActoinCreator","Profile","ProfileContainer","params","autorisedUserId","getUserProfile","updateStatusAC","withRouter","Header","header","loginBlock","login","logoutTC","setAuthUserData","authReducer","getAuthUserData","HeaderContainer","LoginReduxForm","FormsControl","loginTC","stopSubmit","_error","App","path","render","DialogsContainer","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4eb8dbf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileInfo_status__31wvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\n\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n   // messagesForMessages: string\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    value\n\n})\n\n\n/*export const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})*/\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n  //  messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n    return (\n        <div className={s.dialog}>{props.message}</div>)\n\n}\n\n\nexport default Message\n","export const required = (value: string)=>{\n    if (value) {\n        return undefined\n    }\n    else return \"Field is required\";\n}\n\n\n\n\nexport const maxLength = (maxLength:number) => (value:string) => {\n    if (value){\n        if (value.length > maxLength) return 'Max length is ' + maxLength + ' symbols '\n        return undefined\n    }\n\n}","import React from 'react';\nimport s from './FormsControl.module.css'\n\ntype FormsControlType = {\n    input: any\n    meta: any\n}\n\nexport const Input: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl +' ' +(hasError? s.error: '') } >\n            <div>\n          <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const TextArea: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl +' ' +(hasError? s.error: '') } >\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\n","import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n    // isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n    /*if(!props.isAuth) return <Redirect to={\"/login\"}/>*/\n\n    /*const addMessage = ()=>{\n        props.addMessage()\n    }*/\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData.newMessageBody)\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\ntype FormDataType = {\n    newMessageBody: string\n}\nconst maxLength10=maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} validate={[maxLength10, required]} name={'newMessageBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\nimport {UsersPropsType} from \"../components/users/Users\";\nimport {ProfileType} from \"../components/profile/Profile\";\nimport {DialogsType} from \"../components/Dialogs/Dialogs\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToProps = (state: appStateType):mapStateToPropsType => ({\n        isAuth: state.auth.isAuth\n})\n\ntype PropsType = DialogsType | UsersPropsType | ProfileType\n\nexport const withAuthRedirect = (Component: any) => {\n\n\n    const RedirectComponent = (props: PropsType & mapStateToPropsType) => {\n\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...props}/>\n\n    };\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\n","import {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, MessagePageType} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapDispathToPropsType = {\n    addMessage: ( value: string) => void\n   // changeHandler: (body: any) => void\n}\ntype mapStateToPropsType = {\n    dialogsPage: MessagePageType,\n   // isAuth: boolean\n}\nexport type DialogsType= mapStateToPropsType & mapDispathToPropsType\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n      //  isAuth: state.auth.isAuth\n    }\n\n}\n\nlet mapDispathToProps = (dispatch: (action: ChangeAllAddText) => void): mapDispathToPropsType => {\n    return {\n        addMessage: (value: string) => {\n            dispatch(addMessageActoinCreator(value))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps), withAuthRedirect\n)(Dialogs)\n\n\n/*const  withRedirect = withAuthRedirect(Dialogs)\n\n\nconst DialogsContainer = connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps)(withRedirect)\n\n\nexport default DialogsContainer*/","import axios from \"axios\";\n\n\n\n\nconst instance= axios.create({\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers:{\n        \"API-KEY\": \"7866738e-c5bf-440e-864d-4cc467150876\"\n    }\n})\n\n\nexport const userApi = {\n    getUsers(currentPage: number, pageSize:number){\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n    },\n    getUnFollow(id: number){\n     return  instance.delete(`follow/${id}`)\n\n    },\n    getFollow(id: number){\n        return  instance.post(`follow/${id}`)\n\n    },\n    getProfile(userId: number){\n        console.warn('Obsolete method')\n        return  profileAPI.getProfile(userId)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: number){\n        return  instance.get(`profile/` + userId)\n    },\n    getStatus(userId: number){\n        return  instance.get(`profile/status/`+ userId )\n    },\n    updateStatus(status: string){\n        return instance.put(`profile/status`, { status: status }, );\n    },\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post(`/auth/login`, {email ,password, rememberMe })\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}","import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {mapDispathToPropsType} from \"../components/users/UsersContainer\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglIsFetching(true))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\n","export default __webpack_public_path__ + \"static/media/user.ab6315c9.png\";","import React from 'react';\nimport s from \"./Users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {userApi} from \"../../api/api\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    //  follow: (userid: string) => void\n    // UnFollow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    //toglFolowingInProgress:(isFetching: boolean, userId: string)=>void\n    // setCurrentPage: (pageNumber: number) => void\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    return <div>\n        <div>\n            {\n                pages.map(p => {\n                    return <span key={p} className={props.currentPage === p ? s.selectedPage : \"\"}\n                                 onClick={(e) => {\n                                     props.onPageChanged(p)\n                                 }}>{p}</span>\n                })}\n        </div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                       <img alt={'photo'} src={u.photos.small !== null ? u.photos.small : userPhoto}\n                            className={s.usersPhoto}/>\n                       </NavLink>\n                <div>\n                    {u.followed\n                        ? <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.unFolluwThunk(u.id)\n                            /*props.toglFolowingInProgress(true,u.id)\n                           userApi.getUnFollow(+u.id)\n                                .then((data) => {\n                                    if (data.resultCode === 0) {\n                                        props.UnFollow(u.id)}\n                                    props.toglFolowingInProgress(false,u.id)\n                                })*/\n\n                        }}>unfollow</button>\n\n                        : <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.FolluwThunk(u.id)\n                            /*props.toglFolowingInProgress(true,u.id)\n                            userApi.getFollow(+u.id)\n                                .then((data) => {if (data.resultCode === 0) {\n                                        props.follow(u.id)}\n                                    props.toglFolowingInProgress(false,u.id)\n                                })*/\n\n                        }}>follow</button>}\n                </div>\n            </div>\n   </span>\n                <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                   <div>{\"u.location.contry\"}</div>\n                   <div>{\"u.location.city\"}</div>\n               </span>\n            </span>\n            </div>)\n        }\n\n\n    </div>;\n\n\n}\n\n\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","import React from 'react';\nimport loader from \"../../assets/loading/loader.gif\";\n\n\nconst Preloader=()=>{\n    return <img  src={loader} alt=''/>\n}\nexport default Preloader","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {\n    ActionUserType,\n    follow, FolluwThunk,\n    getUsersThunk,\n    setCurrentPage,\n    setTotalUsersCount,\n    setUsers,\n    toglFolowingInProgress,\n    toglIsFetching,\n    unFolluwThunk,\n    unFolow\n} from \"../../redux/users-reduser\";\nimport Users, {UsersType} from \"./Users\";\nimport Preloader from \"../common/Preloader\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nexport type mapDispathToPropsType = {\n    //  follow: (userid: string) => void\n    //  unFolow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toglIsFetching: (isFetching: boolean) => void\n    // toglFolowingInProgress: (isFetching: boolean, userId: string) => void\n    getUsersThunk: (currentPage: number, pageSize: number) => void\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n\n}\n\ntype mapStateToPropsType = {\n    users: any\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress: Array<string>\n}\n\nexport type ResponseUsersType = {\n    error: any\n    items: Array<UsersType>\n    totalCount: number\n}\nexport type UsersPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass UsersContainet extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\n\n        /*this.props.toglIsFetching(true)\n        userApi.getUsers(this.props.currentPage, this.props.pageSize)\n            .then((data) => {\n                this.props.toglIsFetching(false)\n                this.props.setUsers(data.items)\n                this.props.setTotalUsersCount(data.totalCount)\n\n            })*/\n    }\n\n    onPageChanged = (pageNumber: number) => {\n\n        this.props.getUsersThunk(pageNumber, this.props.pageSize)\n        this.props.setCurrentPage(pageNumber);\n        /*this.props.toglIsFetching(true)\n        userApi.getUsers(pageNumber, this.props.pageSize)\n            .then((data) => {\n                this.props.toglIsFetching(false)\n                this.props.setUsers(data.items);\n                this.props.setTotalUsersCount(data.totalCount)\n            });*/\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null\n            }\n            <Users\n                // setUsers={this.props.setUsers}\n                //  setCurrentPage={this.props.setCurrentPage}\n                //follow={this.props.follow}\n                //UnFollow={this.props.unFolow}\n                //  toglFolowingInProgress={this.props.toglFolowingInProgress}\n                folowingInProgres={this.props.folowingInProgress}\n                unFolluwThunk={this.props.unFolluwThunk}\n                FolluwThunk={this.props.FolluwThunk}\n                currentPage={this.props.currentPage}\n                pageSize={this.props.pageSize}\n                totalCount={this.props.totalCount}\n                setTotalUsersCount={this.props.setTotalUsersCount}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n\n\n            />\n        </>\n    }\n}\n\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        users: state.usersPeges.users,\n        pageSize: state.usersPeges.pageSize,\n        totalCount: state.usersPeges.totalCount,\n        currentPage: state.usersPeges.currentPage,\n        isFetching: state.usersPeges.isFetching,\n        folowingInProgress: state.usersPeges.folowingInProgress\n    }\n}\n\n\nexport default compose(withAuthRedirect,connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n}))(UsersContainet)\n\n\n\n/*const  withRedirect = withAuthRedirect(UsersContainet)\n\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n})(withRedirect)*/","import React, {ChangeEvent} from 'react';\nimport s from './ProfileInfo.module.css';\n\ntype ProfileStatusType={\n    status: string\n    updateStatus: (status: string) => void\n}\n\nclass ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState( {\n            editMode: true\n        } );\n    }\n    deactivateEditMode() {\n        this.setState( {\n            editMode: false\n        } );\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status){\n            this.setState({\n                status: this.props.status\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={ this.activateEditMode }>{this.props.status || \"-------\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange}\n                           autoFocus={true}\n                           onBlur={ this.deactivateEditMode.bind(this) }\n                           value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <div>\n                {/*     <img src=\"https://imgcomfort.com/Userfiles/Upload/images/illustration-geiranger.jpg\"  alt={''}/>*/}\n            </div>\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img alt={'post'} src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n\n\n\n\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n\n                <AddNewPostReduxForm onSubmit={addPost}/>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'}  validate={[maxLength20, required]}name={'newPostBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport type setUsersProfileType={\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value:string\n}\n\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\nexport type ActionPageType= AddPostActionType | setUsersProfileType | setStatusActionType|updateStatusActionType\n\nexport type newProfileType={\n    aboutMe: string\n    contacts:{\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube:  string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType={\n    profile:newProfileType | null\n\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType ): newProfilePageType => {\n\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n\n\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value:string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType):setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status :string): setStatusActionType => ({\n  type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status :string): updateStatusActionType => ({\n  type: 'UPDATE_STATUS', status\n})\n\n\nexport default profileReducer\n\n\nexport const getUserProfile=(userId: string)=>{\n\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n\n        userApi.getProfile(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus=(userId: string)=>{\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus= (status: string)=>{\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if(response.data.resultCode===0){\n                dispatch(updateStatusAC(status))}\n            })\n    }\n}\n\n\n\n","\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nimport {ActionPageType, addPostActoinCreator,} from \"../../../redux/profile-reduser\";\n\n\n\ntype mapDispathToPropsType={\n    addPost: (value: string)=>void\n\n}\n\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ActionPageType) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: (value: string)=>{dispatch(addPostActoinCreator(value))},\n\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\nimport {newProfileType} from \"../../redux/profile-reduser\";\n\n\nexport type ProfileType = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, newProfileType, updateStatus} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {getUserProfile, getStatus, updateStatus}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\nexport default Header","import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport { stopSubmit } from 'redux-form';\n\n//export type setUserDataActionType = { type: \"SET-USER-DATA\", data: {id: number | null, email: string, login: string ,isAuth: boolean }}\nexport type setUserDataActionType = ReturnType<typeof setAuthUserData>\n\nexport const setAuthUserData = (data: AuthPageType) => ({\n    type: \"SET-USER-DATA\", data\n})\n\n\nexport type ActionAuthType = setUserDataActionType\n\n\nexport type AuthPageType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\n\nlet initialState: AuthPageType = {\n\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\n\nconst authReducer = (state: AuthPageType = initialState, action: ActionAuthType): AuthPageType => {\n\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {...state, ...action.data}\n    }\n    return state\n\n}\n\n\nexport default authReducer\n\nexport const getAuthUserData = () => {\n    return (dispatch: Dispatch) => {\n        authAPI.me()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data\n                    dispatch(setAuthUserData({id, email, login, isAuth: true}))\n                }\n            })\n    }\n}\n\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\n\n    return (dispatch: Dispatch<any>) => {\n\n\n\n        authAPI.login(email, password, rememberMe)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                  let message =  response.data.messages.length > 0 ? response.data.messages[0]: 'some error'\n                    dispatch(stopSubmit(\"login\", {_error: message}))\n                }\n            })\n    }\n}\n\nexport const logoutTC = () => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.logout()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData({login: null, id: null, email: null, isAuth: false}))\n                }\n            })\n    }\n}\n","import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logoutTC} from \"../../redux/auth-reduser\";\n\n\n\n\n\n\ntype mapStateToPropsType ={\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType= {\n   // setAuthUserData: (id: number, email: string, login: string)=>void\n    getAuthUserData: ()=>void\n    logoutTC : ()=>void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n    componentDidMount() {\n        this.props.getAuthUserData()\n\n    }\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps,{\n    getAuthUserData,logoutTC}) (HeaderContainer)","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/formsControl/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reduser\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport { Redirect } from \"react-router-dom\";\nimport s from'../common/formsControl/FormsControl.module.css'\n\n\n\n\n\ntype FormDataType={\n    email: string\n    password: string\n    rememberMe: boolean\n\n}\n\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> =(props)=> {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'email'} validate={[required]} name={'email'} component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={'password'} validate={[required]} name={'password'} component={Input}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={'rememberMe'} component={Input}/>\n            </div>\n            { props.error && <div className={s.FormsControl}>\n                {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\n\nfunction Login(props: mapDispathToPropsType & mapStateToPropsType ) {\n    const onSubmit = (formData: FormDataType) => {\n        props.loginTC(formData.email, formData.password,formData.rememberMe)}\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n\n    return <div>\n        <div>Login</div>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n\n}\ntype mapDispathToPropsType={\n    loginTC : (email: string, password: string, rememberMe: boolean) =>void\n}\ntype mapStateToPropsType={\n    isAuth: boolean\n}\nconst mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return{\n        isAuth: state.auth.isAuth\n    }\n\n}\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps, {loginTC})(Login)","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport {Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainet from \"./components/users/UsersContainer\";\r\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/header/header.container\";\r\nimport Login from \"./components/login/Login\";\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n\r\n        <div className='app-wrapper'>\r\n            <HeaderContainer/>\r\n            <Navbar/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                <Route path='/users' render={() => <UsersContainet/>}/>\r\n                <Route path='/login' render={() => <Login/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport { reducer as formReducer } from 'redux-form'\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport usersReducer from \"./users-reduser\";\nimport authReducer from \"./auth-reduser\";\nimport thunk from 'redux-thunk'\n\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPeges: usersReducer,\n    auth: authReducer,\n    form: formReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from 'react-redux'\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux.store\";\r\n\r\n\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n      \r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>,\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n// @ts-ignor\r\n/*store.subscribe(rerenderEntireTree)*/\r\n\r\n/*\r\nrerenderEntireTree(store.getState())\r\nstore.subscribe(()=>{\r\n    let state=store.getState()\r\n    rerenderEntireTree(state)\r\n})\r\n*/\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__P0OFh\",\"error\":\"FormsControl_error__1g0kt\",\"FormsControl\":\"FormsControl_FormsControl__3L67z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__1Yu6Q\",\"selectedPage\":\"Users_selectedPage__3sYe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};"],"sourceRoot":""}