{"version":3,"sources":["redux/users-reduser.ts","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/Myposts/Post/Post.module.css","api/api.ts","components/navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","redux/dialogs-reduser.ts","redux/profile-reduser.ts","redux/auth-reduser.ts","redux/app-reduser.ts","redux/redux.store.ts","components/navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/formsControl/FormsControl.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.ts","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Myposts/MyPostsContainer.ts","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/header/header.tsx","components/header/header.container.tsx","components/login/Login.tsx","chat/Chat.tsx","App.tsx","index.tsx","components/common/formsControl/FormsControl.module.css","chat/Chat.module.css","assets/loading/loader.gif","components/common/preloader/Preloader.tsx","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css"],"names":["initialState","users","pageSize","totalCount","currentPage","isFetching","folowingInProgress","usersReducer","state","action","type","map","u","userid","id","followed","userId","filter","setCurrentPage","setTotalUsersCount","toglIsFetching","toglFolowingInProgress","getUsersThunk","dispatch","userApi","getUsers","then","response","data","items","unFolluwThunk","getUnFollow","resultCode","FolluwThunk","getFollow","module","exports","instance","axios","create","baseURL","withCredentials","headers","get","delete","post","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","saveProfile","profile","updatePhotos","image","formData","FormData","append","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptha","Boolean","window","location","hostname","match","dialogs","v1","name","messages","message","dialogsReducer","text","value","posts","likekounts","profileReducer","newPost","getUserProfile","setAuthUserData","isAuth","authReducer","url","getAuthUserData","length","stopSubmit","_error","initialized","appReducer","rootReducer","combineReducers","dialogsPage","profilePage","usersPeges","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","Navbar","className","s","nav","item","to","activeClassName","activeClassLink","DialogItem","props","dialog","active","Message","required","maxLength","Input","input","meta","children","hasError","touched","error","formControl","TextArea","Dialogs","messageElements","m","dialogsElements","d","dialogsItems","AddMessageReduxForm","onSubmit","addMessage","newMessageBody","maxLength10","reduxForm","handleSubmit","Field","placeholder","validate","component","mapStateToProps","withAuthRedirect","Component","connect","compose","addMessageActoinCreator","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","ProfileDataForm","initialValues","fullName","aboutMe","lookingForAJob","ProfilReduxForm","Profileinfo","editmode","Preloader","discriptionBlock","src","photos","large","isOwner","target","files","savePhoto","goToEditmode","ProfileData","contacts","Object","entries","forEach","key","push","onClick","style","Post","alt","MyPosts","postsElements","p","postsBlock","AddNewPostReduxForm","addPost","newPostBody","maxLength20","MyPostsContainer","addPostActoinCreator","Profile","ProfileContainer","this","params","autorisedUserId","history","refreshPrrofile","prevProps","React","updateStatusAC","getState","apiModel","lookingForAJobDescription","withRouter","Header","header","loginBlock","logoutTC","HeaderContainer","LoginReduxForm","FormsControl","loginTC","Chat","authId","useSelector","messange","setMessane","user","setUser","ws","setWs","h1Ref","useRef","onmessage","JSON","parse","current","scrollTo","scrollHeight","webSocket","WebSocket","chat","ref","messanges","index","usersPhoto","photo","span2","span","userName","send","UsersContainet","lazy","App","initializedApp","path","render","DialogsContainer","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","loader"],"mappings":"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","file":"static/js/main.a9af9e9b.chunk.js","sourcesContent":["import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n    return (dispatch: Dispatch)=>{\n        dispatch(toglIsFetching(true))\n        dispatch(setCurrentPage(currentPage))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n    }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileInfo_status__31wvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","import axios from \"axios\";\n\nimport ss from '../assets/images/user.png'\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"7866738e-c5bf-440e-864d-4cc467150876\"\n    }\n})\n\n\nexport const userApi = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n    },\n    getUnFollow(id: number) {\n        return instance.delete(`follow/${id}`)\n\n    },\n    getFollow(id: number) {\n        return instance.post(`follow/${id}`)\n\n    },\n    getProfile(userId: string | undefined) {\n        console.warn('Obsolete method')\n        return profileAPI.getProfile(userId)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: string | undefined) {\n        return instance.get(`profile/` + userId)\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/` + userId)\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, {status: status},);\n    },\n    saveProfile(profile: any) {\n        return instance.put(`profile`, profile,);\n    },\n    updatePhotos(image: string) {\n        const formData = new FormData()\n        formData.append(\"image\", image)\n        return instance.put(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': `multipart/form-data`,\n            },\n        })\n    }\n}\n\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean, captcha: null | string | undefined) {\n        debugger\n        return instance.post(`/auth/login`, {email, password, rememberMe, captcha})\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\nexport const securityAPI = {\n    getCaptha() {\n        return instance.get(`security/get-captcha-url`)\n    },\n\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\", value})\n\n\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\nimport {Dispatch} from \"redux\";\nimport {setAuthUserData} from \"./auth-reduser\";\nimport {appStateType, StoreReduxType} from \"./redux.store\";\nimport {FormDataType} from \"../components/profile/ProfileInfo/ProfileDataForm\";\n\n\nexport type setUsersProfileType = {\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value: string\n}\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\n\nexport type ActionPageType =\n    | AddPostActionType\n    | setUsersProfileType\n    | setStatusActionType\n    | updateStatusActionType\n    | ReturnType<typeof SavePhotoAC>\n\n\nexport type newProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: string,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType = {\n    profile: newProfileType | null\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType): newProfilePageType => {\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n\n        case \"UPDATE_PHOTO\": {\n            return {...state, profile: {...state.profile, ...action.data}}\n        }\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value: string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType): setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status: string): setStatusActionType => ({\n    type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status: string): updateStatusActionType => ({\n    type: 'UPDATE_STATUS', status\n})\nexport const SavePhotoAC = (data: any) => ({\n    type: 'UPDATE_PHOTO', data\n} as const)\n\n\nexport default profileReducer\n\n\nexport const getUserProfile = (userId: string | undefined) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        userApi.getProfile(userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus = (userId: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus = (status: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}\nexport const savePhoto = (status: string) => {\n    return (dispatch: Dispatch<any>) => {\n        profileAPI.updatePhotos(status)\n            .then((response: AxiosResponse<any>) => {\n                debugger\n                if (response.data.resultCode === 0) {\n                    debugger\n                    dispatch(SavePhotoAC(response.data.data.photos))\n                }\n            })\n    }\n}\nexport const saveProfile = (profile: FormDataType\n) => {\n    debugger\n    return (dispatch: Dispatch<any>, getState: () => appStateType) => {\n        const state = getState()\n        const apiModel = {\n            lookingForAJob: profile.lookingForAJob,\n            lookingForAJobDescription: state.profilePage.profile?.lookingForAJobDescription === ''\n                ? 'news'\n                : state.profilePage.profile?.lookingForAJobDescription,\n            fullName: profile.fullName,\n            aboutMe: profile.aboutMe,\n        }\n        profileAPI.saveProfile(apiModel)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    debugger\n                    dispatch(getUserProfile(state.profilePage.profile?.userId))\n                }\n            })\n    }\n}\n\n\n","import {authAPI, securityAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from 'redux-form';\n\nexport type setUserDataActionType = ReturnType<typeof setAuthUserData>\nexport type ActionAuthType = setUserDataActionType | ReturnType<typeof getCapthaUrlAC>\nexport type AuthPageType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n    captcha?: string | null\n}\n\nexport const setAuthUserData = (data: AuthPageType) => ({type: \"SET-USER-DATA\", data} as const)\nexport const getCapthaUrlAC = (url: string) => ({type: \"GET-CAPHA-URL\", url} as const)\n\n\nlet initialState: AuthPageType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captcha: null\n}\n\n\nconst authReducer = (state: AuthPageType = initialState, action: ActionAuthType): AuthPageType => {\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {...state, ...action.data}\n        case \"GET-CAPHA-URL\": {\n            return {...state, captcha: action.url}\n        }\n    }\n    return state\n\n}\n\n\nexport default authReducer\n\nexport const getCaphaTC = () => {\n    return (dispatch: Dispatch) => {\n        securityAPI.getCaptha()\n            .then((response) => {\n                dispatch(getCapthaUrlAC(response.data.url))\n            })\n    }\n}\nexport const getAuthUserData = () => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.me()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data\n                    dispatch(setAuthUserData({id, email, login, isAuth: true}))\n                    // dispatch(getAuthUserData())\n                } else {\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\n                    dispatch(stopSubmit(\"login\", {_error: message}))\n                }\n            })\n    }\n}\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha: null | string | undefined) => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.login(email, password, rememberMe, captcha)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                    if (response.data.resultCode === 10) {\n                        dispatch(getCaphaTC())\n                    }\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\n                    dispatch(stopSubmit(\"login\", {_error: message}))\n                }\n            })\n    }\n}\n\nexport const logoutTC = () => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.logout()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData({login: null, id: null, email: null, isAuth: false}))\n                }\n            })\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {getAuthUserData} from \"./auth-reduser\";\n\n\nexport type initializedSucsessActionType = ReturnType<typeof initializedSucsessAction>\n\n\nexport const initializedSucsessAction = () => ({type: \"INITIALIZED_SUCCESS\"} as const)\n\n\ntype appReducerType = {\n    initialized: boolean\n}\n\nlet initialState = {\n    initialized: false\n}\n\n\nconst appReducer = (state: appReducerType = initialState, action: initializedSucsessActionType): appReducerType => {\n\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\": {\n            return {...state, initialized: true }\n        }\n    }\n    return state\n\n}\n\n\nexport default appReducer\n\n\nexport const initializedApp = () => (dispatch: Dispatch<any>) => {\n    const promise = dispatch(getAuthUserData())\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSucsessAction())\n        })\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {reducer as formReducer} from 'redux-form'\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport usersReducer from \"./users-reduser\";\nimport authReducer from \"./auth-reduser\";\nimport thunk from 'redux-thunk'\nimport appReducer from \"./app-reduser\";\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPeges: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type StoreReduxType = typeof store\n\n\nexport default store","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n            <div className={s.item}>\n                <NavLink to=\"/chat\" activeClassName={s.activeClassLink}>Chat</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={s.dialog}>{props.message}</div>)\n\n}\n\n\nexport default Message\n","export const required = (value: string)=>{\n    if (value) {\n        return undefined\n    }\n    else return \"Field is required\";\n}\n\n\n\n\nexport const maxLength = (maxLength:number) => (value:string) => {\n    if (value){\n        if (value.length > maxLength) return 'Max length is ' + maxLength + ' symbols '\n        return undefined\n    }\n\n}","import React from 'react';\nimport s from './FormsControl.module.css'\n\ntype FormsControlType = {\n    input: any\n    meta: any\n}\n\nexport const Input: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const TextArea: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\n","import React from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n}\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst Dialogs = (props: DialogsType) => {\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\n\nconst maxLength10 = maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'}\n                       validate={[maxLength10, required]}\n                       name={'newMessageBody'}\n                       component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\nimport {UsersPropsType} from \"../components/users/Users\";\nimport {ProfileType} from \"../components/profile/Profile\";\nimport {DialogsType} from \"../components/Dialogs/Dialogs\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToProps = (state: appStateType):mapStateToPropsType => ({\n        isAuth: state.auth.isAuth\n})\n\ntype PropsType = DialogsType | UsersPropsType | ProfileType\n\nexport const withAuthRedirect = (Component: any) => {\n\n\n    const RedirectComponent = (props: PropsType & mapStateToPropsType) => {\n\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...props}/>\n\n    };\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\n","import {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, MessagePageType} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapDispathToPropsType = {\n    addMessage: (value: string) => void\n}\ntype mapStateToPropsType = {\n    dialogsPage: MessagePageType,\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n\n}\n\nlet mapDispathToProps = (dispatch: (action: ChangeAllAddText) => void): mapDispathToPropsType => {\n    return {\n        addMessage: (value: string) => {\n            dispatch(addMessageActoinCreator(value))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps), withAuthRedirect\n)(Dialogs)\n\n\n/*const  withRedirect = withAuthRedirect(Dialogs)\n\n\nconst DialogsContainer = connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps)(withRedirect)\n\n\nexport default DialogsContainer*/","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)};\n\n        const deactivateEditMode = () => {\n            setEditMode(false)\n            props.updateStatus(status);\n        }\n\n        return (\n            <div>\n                {!editMode &&\n                <div>\n                  <b>status</b>  <span onDoubleClick={() => setEditMode(true)}>{props.status || \"-------\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}/>\n                </div>\n                }\n            </div>\n        )\n\n}\n","import React from \"react\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {required} from \"../../../utils/validators/validators\";\nimport {Input} from \"../../common/formsControl/FormsControl\";\n\nexport type FormDataType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n\n}\ntype test = {\n    profile?: newProfileType\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, test> & test> = ({\n                                                                                     profile, handleSubmit, initialValues\n                                                                                 }) => {\n\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <button>save</button>\n        </div>\n\n        <div>\n            <b>full name</b>{initialValues.fullName}\n            <Field placeholder={'email'} name={'fullName'} component={Input}/>\n        </div>\n        <div>\n            <b>about me</b> {initialValues.aboutMe}\n\n            <Field placeholder={'email'} name={'aboutMe'} component={Input}/>\n        </div>\n        <div>\n            <b>looking For a Job</b>{initialValues.lookingForAJob}\n            <Field type={\"checkbox\"} name={'lookingForAJob'} component={Input}/>\n        </div>\n\n    </form>\n}\n\n\nexport default ProfileDataForm\n\nexport const ProfilReduxForm = reduxForm<FormDataType, test>({form: 'profile'})(ProfileDataForm)\n","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\nimport ProfileDataForm, {FormDataType, ProfilReduxForm} from \"./ProfileDataForm\";\nimport {log} from \"util\";\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: any) => void\n    saveProfile: (photo: any) => void\n}\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n\n    const [editmode, setEditMode] = useState(false)\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const onMinePhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n\n        if (e.target.files && e.target.files.length) {\n            props.savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData: FormDataType) => {\n        props.saveProfile(formData)\n        setEditMode(false)\n    }\n\n    return (\n        <div>\n\n            <div className={s.discriptionBlock}>\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n                {props.isOwner && <input type={'file'} onChange={onMinePhotoSelected}/>}\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n                {editmode\n                    ? <ProfilReduxForm initialValues={props.profile} onSubmit={onSubmit}/>\n                    : <ProfileData isOwner={props.isOwner}\n                                   profile={props.profile}\n                                   goToEditmode={() => setEditMode(true)}/>}\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo\n\nconst ProfileData: React.FC<{ profile: newProfileType, isOwner: boolean, goToEditmode: () => void }> = ({profile, goToEditmode, isOwner}) => {\n    let contacts: any[] = []\n    profile && Object.entries(profile.contacts).forEach(([key, value]) => contacts.push(<div\n        key={key}>{value !== null && value !== '' ? `${key}: ${value}` : ``}</div>))\n\n    return <div>\n        {isOwner && <div>\n            <button onClick={goToEditmode}>edit</button>\n        </div>}\n\n        <div>\n            <b>full name</b><span style={{'paddingLeft': '10px'}}>{profile.fullName}</span>\n        </div>\n        <div>\n            <b>about me</b><span style={{'paddingLeft': '10px'}}>{profile.aboutMe}</span>\n        </div>\n        <div>\n            <b>looking For a Job</b><span style={{'paddingLeft': '10px'}}>{profile.lookingForAJob ? 'yes' : 'no'}</span>\n        </div>\n        <div>\n            <b>contacts</b>{contacts}\n        </div>\n    </div>\n}\n\n","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img alt={'post'} src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddNewPostReduxForm onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'} validate={[maxLength20, required]} name={'newPostBody'}\n                       component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nimport {ActionPageType, addPostActoinCreator,} from \"../../../redux/profile-reduser\";\n\n\ntype mapDispathToPropsType={\n    addPost: (value: string)=>void\n\n}\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ActionPageType) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: (value: string)=>{dispatch(addPostActoinCreator(value))},\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\nimport {newProfileType} from \"../../redux/profile-reduser\";\n\n\nexport type ProfileType = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: any) => void\n    saveProfile: (photo: any) => void\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo saveProfile={props.saveProfile}\n                         savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getStatus,\n    getUserProfile,\n    newProfileType,\n    savePhoto,\n    saveProfile,\n    updateStatus\n} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: any) => void\n    saveProfile: (photo: any) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshPrrofile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshPrrofile()\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshPrrofile();\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         isOwner={!this.props.match.params.userId}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}\n                         savePhoto={this.props.savePhoto}\n                         saveProfile={this.props.saveProfile}\n                />\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile\n}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n            </div>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType = {\n    logoutTC: () => void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    logoutTC\n})(HeaderContainer)","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/formsControl/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reduser\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {Redirect} from \"react-router-dom\";\nimport s from '../common/formsControl/FormsControl.module.css'\n\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null | undefined\n}\ntype test = {\n    captcha?: string | null | undefined\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, test> & test> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n\n                <Field placeholder={'email'} validate={[required]} name={'email'} component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={'password'} validate={[required]} name={'password'} component={Input}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={'rememberMe'} component={Input}/>\n            </div>\n\n            {props.error && <div className={s.FormsControl}>\n                {props.error}\n            </div>}\n            <div>\n                {props.captcha && <img src={props.captcha}/>}\n                {props.captcha &&\n                <div>\n                    <Field placeholder={'captcha'} validate={[required]} name={'captcha'} component={Input}/>\n                </div>\n\n\n                }\n\n\n                <button>Login</button>\n            </div>\n        </form>\n    )\n\n}\n\nconst LoginReduxForm = reduxForm<FormDataType, test>({form: 'login'})(LoginForm)\n\n\nfunction Login(props: mapDispathToPropsType & mapStateToPropsType) {\n    debugger\n    const onSubmit = (formData: FormDataType) => {\n        props.loginTC(formData.email, formData.password, formData.rememberMe, formData.captcha)\n\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <div>Login</div>\n        <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\n    </div>\n\n}\n\ntype mapDispathToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captha: null | string | undefined) => void\n}\ntype mapStateToPropsType = {\n    isAuth: boolean\n    captcha: string | null | undefined\n}\nconst mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captcha: state.auth.captcha\n    }\n\n}\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {loginTC})(Login)","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\"\nimport s from './Chat.module.css'\nimport {useSelector} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\n\ntype UserType = {\n    message: string\n    photo: string | undefined\n    userId: number\n    userName: string\n}\n\nexport const Chat = function () {\n\n    const authId = useSelector<appStateType, number | null>(state => state.auth.id)\n    let [messange, setMessane] = useState('')\n    let [user, setUser] = useState<UserType[]>([])\n    let [ws, setWs] = useState<WebSocket>()\n\n    const h1Ref = useRef<HTMLHeadingElement>(null)\n\n\n// 3. в объекте вс приходит свойство onmessage в нем находится введеный текст\n// 4. сзздаем из него объект и делаем копью нового сообщения и с старых сообщений\n\n    if (ws) {\n        ws.onmessage = (messange) => {\n            debugger\n            let messages = JSON.parse(messange.data)\n            setUser([...user, ...messages])\n            if (h1Ref && h1Ref.current) {\n                h1Ref.current.scrollTo(0, h1Ref.current.scrollHeight)\n            }\n        }\n    }\n\n//1. делаем запрос в wss\n//2. если запрос пришел сетаем его\n    useEffect(() => {\n        let webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n        if (webSocket) {\n            setWs(webSocket)\n        }\n    }, [])\n\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessane(e.currentTarget.value)\n    }\n\n    const onMessange = () => {\n        if (ws) {\n            ws.send(messange)\n            setMessane('')\n        }\n    }\n\n    return (<div className={s.chat}>\n\n        <div>\n            <div ref={h1Ref} className={s.messanges}>\n                {user.map((u, index) => <div key={index} className={s.messange}>\n                        <img className={s.usersPhoto} src={u.photo}/><b><span\n                        className={u.userId === authId ? s.span2 : s.span}>{u.userName}</span></b>\n                        <span>{u.message}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n        <div>\n            <textarea value={messange} onChange={onMessageChange}/>\n            <button onClick={onMessange}>Send</button>\n        </div>\n    </div>)\n\n}\n\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n//import UsersContainet from \"./components/users/UsersContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport HeaderContainer from \"./components/header/header.container\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"./redux/redux.store\";\nimport {compose} from \"redux\";\nimport {initializedApp} from \"./redux/app-reduser\";\nimport Preloader from \"./components/common/preloader/Preloader\";\nimport {Chat} from \"./chat/Chat\";\nconst UsersContainet = React.lazy(() => import('./components/users/UsersContainer'));\n\n\ntype mapDispathToPropsType = {\n    initializedApp: () => void\n}\n\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\n\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass App extends React.Component<HeaderPropsType> {\n\n\n    componentDidMount() {\n        this.props.initializedApp()\n\n    }\n\n    render() {\n\n        {\n            if (!this.props.initialized) {\n                return <Preloader/>\n            }\n        }\n\n\n        return (\n\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className=\"app-wrapper-content\">\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/users' render={() => <React.Suspense fallback={<div><Preloader/></div>}>\n                        <UsersContainet />\n                    </React.Suspense>}/>\n\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/chat' render={() => <Chat/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n\n        initialized: state.app.initialized\n    }\n}\n\n\n/*export default compose(withRouter, connect(null,{\n    getAuthUserData})) (App)*/\n/*type PathParamsType = {\n    param1: string,\n}\n\n// Your component own properties\ntype PropsType = RouteComponentProps<PathParamsType> & {\n    someString: string,\n}*/\n\n\nexport default compose(/*withRouter*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    initializedApp\n}))(App)","import React, {useEffect} from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux'\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport store from \"./redux/redux.store\";\nimport App from \"./App\";\n\nconst rerenderEntireTree = () => {\n\n    ReactDOM.render(\n      \n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>,\n        </HashRouter>,\n        document.getElementById('root'));\n}\n\n\n\n\nrerenderEntireTree()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__P0OFh\",\"error\":\"FormsControl_error__1g0kt\",\"FormsControl\":\"FormsControl_FormsControl__3L67z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Chat_usersPhoto__1XzaW\",\"messanges\":\"Chat_messanges__cYBo0\",\"chat\":\"Chat_chat__fhiBV\",\"messange\":\"Chat_messange__10FAU\",\"span\":\"Chat_span__21kzV\",\"span2\":\"Chat_span2__3ztus\"};","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","import React from 'react';\nimport loader from \"../../../assets/loading/loader.gif\";\n\n\n const Preloader = () => {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};"],"sourceRoot":""}