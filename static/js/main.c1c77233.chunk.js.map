{"version":3,"sources":["components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/Myposts/Post/Post.module.css","components/navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","redux/dialogs-reduser.ts","api/api.ts","redux/profile-reduser.ts","redux/users-reduser.ts","redux/auth-reduser.ts","redux/app-reduser.ts","redux/redux.store.ts","components/navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/formsControl/FormsControl.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.ts","assets/images/user.png","components/users/Users.tsx","assets/loading/loader.gif","components/common/Preloader.tsx","redux/user-selectors.ts","components/users/UsersContainer.tsx","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Myposts/MyPostsContainer.ts","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/header/header.tsx","components/header/header.container.tsx","components/login/Login.tsx","App.tsx","index.tsx","components/common/formsControl/FormsControl.module.css","components/users/Users.module.css","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","dialogs","id","v1","name","messages","message","dialogsReducer","state","action","type","text","value","instance","axios","create","baseURL","withCredentials","headers","userApi","currentPage","pageSize","get","delete","post","userId","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","profile","posts","likekounts","profileReducer","newPost","users","totalCount","isFetching","folowingInProgress","usersReducer","map","u","userid","followed","filter","setCurrentPage","setTotalUsersCount","toglIsFetching","toglFolowingInProgress","setAuthUserData","data","login","isAuth","authReducer","getAuthUserData","dispatch","then","response","resultCode","initialized","appReducer","rootReducer","combineReducers","dialogsPage","profilePage","usersPeges","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","Navbar","className","s","nav","item","to","activeClassName","activeClassLink","DialogItem","props","dialog","active","Message","required","maxLength","length","Input","input","meta","children","hasError","touched","error","formControl","TextArea","Dialogs","messageElements","m","dialogsElements","d","dialogsItems","AddMessageReduxForm","onSubmit","formData","log","newMessageBody","addMessage","maxLength10","reduxForm","handleSubmit","Field","placeholder","validate","component","mapStateToProps","withAuthRedirect","Component","connect","compose","addMessageActoinCreator","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","onClick","e","onPageChanged","alt","src","photos","small","userPhoto","usersPhoto","disabled","folowingInProgres","some","unFolluwThunk","FolluwThunk","Preloader","loader","getUsersS","getPageSizeS","getTotalCountS","getCurrentPageS","getIsFetchingS","getFolowingInProgressS","UsersContainet","pageNumber","getUsersThunk","this","React","items","ProfileStatus","useState","editMode","setEditMode","setStatus","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","Profileinfo","discriptionBlock","fullName","large","Post","MyPosts","postsElements","postsBlock","AddNewPostReduxForm","addPost","newPostBody","maxLength20","MyPostsContainer","addPostActoinCreator","Profile","ProfileContainer","params","autorisedUserId","history","getUserProfile","updateStatusAC","withRouter","Header","header","loginBlock","logoutTC","HeaderContainer","LoginReduxForm","FormsControl","loginTC","stopSubmit","_error","App","initializedApp","path","render","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c1c77233.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileInfo_status__31wvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\n\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n   // messagesForMessages: string\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    value\n\n})\n\n\n/*export const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})*/\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n  //  messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import axios from \"axios\";\n\n\n\n\nconst instance= axios.create({\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers:{\n        \"API-KEY\": \"7866738e-c5bf-440e-864d-4cc467150876\"\n    }\n})\n\n\nexport const userApi = {\n    getUsers(currentPage: number, pageSize:number){\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n    },\n    getUnFollow(id: number){\n     return  instance.delete(`follow/${id}`)\n\n    },\n    getFollow(id: number){\n        return  instance.post(`follow/${id}`)\n\n    },\n    getProfile(userId: number){\n        console.warn('Obsolete method')\n        return  profileAPI.getProfile(userId)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: number){\n        return  instance.get(`profile/` + userId)\n    },\n    getStatus(userId: number){\n        return  instance.get(`profile/status/`+ userId )\n    },\n    updateStatus(status: string){\n        return instance.put(`profile/status`, { status: status }, );\n    },\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post(`/auth/login`, {email ,password, rememberMe })\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}","import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport type setUsersProfileType={\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value:string\n}\n\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\nexport type ActionPageType= AddPostActionType | setUsersProfileType | setStatusActionType|updateStatusActionType\n\nexport type newProfileType={\n    aboutMe: string\n    contacts:{\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube:  string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType={\n    profile:newProfileType | null\n\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType ): newProfilePageType => {\n\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n\n\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value:string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType):setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status :string): setStatusActionType => ({\n  type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status :string): updateStatusActionType => ({\n  type: 'UPDATE_STATUS', status\n})\n\n\nexport default profileReducer\n\n\nexport const getUserProfile=(userId: string)=>{\n\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n\n        userApi.getProfile(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus=(userId: string)=>{\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus= (status: string)=>{\n    return (dispatch: (action: ActionPageType)=> ActionPageType )=>{\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if(response.data.resultCode===0){\n                dispatch(updateStatusAC(status))}\n            })\n    }\n}\n\n\n\n","import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {mapDispathToPropsType} from \"../components/users/UsersContainer\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglIsFetching(true))\n        dispatch(setCurrentPage(currentPage))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\n","import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport { stopSubmit } from 'redux-form';\n\n//export type setUserDataActionType = { type: \"SET-USER-DATA\", data: {id: number | null, email: string, login: string ,isAuth: boolean }}\nexport type setUserDataActionType = ReturnType<typeof setAuthUserData>\n\nexport const setAuthUserData = (data: AuthPageType) => ({\n    type: \"SET-USER-DATA\", data\n} as const\n)\n\n\nexport type ActionAuthType = setUserDataActionType\n\n\nexport type AuthPageType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\n\nlet initialState: AuthPageType = {\n\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\n\nconst authReducer = (state: AuthPageType = initialState, action: ActionAuthType): AuthPageType => {\n\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {...state, ...action.data}\n    }\n    return state\n\n}\n\n\nexport default authReducer\n\nexport const getAuthUserData = () => {\n    return (dispatch: Dispatch) => {\n        authAPI.me()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data\n                    dispatch(setAuthUserData({id, email, login, isAuth: true}))\n                }\n            })\n    }\n}\n\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\n\n    return (dispatch: Dispatch<any>) => {\n\n\n\n        authAPI.login(email, password, rememberMe)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                  let message =  response.data.messages.length > 0 ? response.data.messages[0]: 'some error'\n                    dispatch(stopSubmit(\"login\", {_error: message}))\n                }\n            })\n    }\n}\n\nexport const logoutTC = () => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.logout()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData({login: null, id: null, email: null, isAuth: false}))\n                }\n            })\n    }\n}\n","import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport { stopSubmit } from 'redux-form';\nimport {AuthPageType, getAuthUserData} from \"./auth-reduser\";\n\nexport type initializedSucsessActionType = ReturnType<typeof initializedSucsessAction>\n\n\nexport const initializedSucsessAction = () => ({\n        type: \"INITIALIZED_SUCCESS\"} as const\n)\n\n\n\ntype appReducerType = {\n    initialized: boolean\n}\n\nlet initialState = {\n\n    initialized: false\n}\n\n\nconst appReducer = (state: appReducerType = initialState, action: initializedSucsessActionType): appReducerType => {\n\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\":{\n            return {\n                ...state,\n                initialized: true\n            }\n        }\n\n    }\n    return state\n\n}\n\n\nexport default appReducer\n\n\nexport const initializedApp = ()=>(dispatch: Dispatch<any>)=>{\n  const promise =  dispatch(getAuthUserData())\n  const promise1 =  dispatch(getAuthUserData())\n\n   /// promise.then(()=>{})???????????\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSucsessAction())\n        })\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport { reducer as formReducer } from 'redux-form'\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport usersReducer from \"./users-reduser\";\nimport authReducer from \"./auth-reduser\";\nimport thunk from 'redux-thunk'\nimport appReducer from \"./app-reduser\";\n\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPeges: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n    return (\n        <div className={s.dialog}>{props.message}</div>)\n\n}\n\n\nexport default Message\n","export const required = (value: string)=>{\n    if (value) {\n        return undefined\n    }\n    else return \"Field is required\";\n}\n\n\n\n\nexport const maxLength = (maxLength:number) => (value:string) => {\n    if (value){\n        if (value.length > maxLength) return 'Max length is ' + maxLength + ' symbols '\n        return undefined\n    }\n\n}","import React from 'react';\nimport s from './FormsControl.module.css'\n\ntype FormsControlType = {\n    input: any\n    meta: any\n}\n\nexport const Input: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl +' ' +(hasError? s.error: '') } >\n            <div>\n          <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const TextArea: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl +' ' +(hasError? s.error: '') } >\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\n","import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n    // isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n    /*if(!props.isAuth) return <Redirect to={\"/login\"}/>*/\n\n    /*const addMessage = ()=>{\n        props.addMessage()\n    }*/\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData.newMessageBody)\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\ntype FormDataType = {\n    newMessageBody: string\n}\nconst maxLength10=maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} validate={[maxLength10, required]} name={'newMessageBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\nimport {UsersPropsType} from \"../components/users/Users\";\nimport {ProfileType} from \"../components/profile/Profile\";\nimport {DialogsType} from \"../components/Dialogs/Dialogs\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToProps = (state: appStateType):mapStateToPropsType => ({\n        isAuth: state.auth.isAuth\n})\n\ntype PropsType = DialogsType | UsersPropsType | ProfileType\n\nexport const withAuthRedirect = (Component: any) => {\n\n\n    const RedirectComponent = (props: PropsType & mapStateToPropsType) => {\n\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...props}/>\n\n    };\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\n","import {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, MessagePageType} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapDispathToPropsType = {\n    addMessage: ( value: string) => void\n   // changeHandler: (body: any) => void\n}\ntype mapStateToPropsType = {\n    dialogsPage: MessagePageType,\n   // isAuth: boolean\n}\nexport type DialogsType= mapStateToPropsType & mapDispathToPropsType\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n      //  isAuth: state.auth.isAuth\n    }\n\n}\n\nlet mapDispathToProps = (dispatch: (action: ChangeAllAddText) => void): mapDispathToPropsType => {\n    return {\n        addMessage: (value: string) => {\n            dispatch(addMessageActoinCreator(value))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps), withAuthRedirect\n)(Dialogs)\n\n\n/*const  withRedirect = withAuthRedirect(Dialogs)\n\n\nconst DialogsContainer = connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps)(withRedirect)\n\n\nexport default DialogsContainer*/","export default __webpack_public_path__ + \"static/media/user.ab6315c9.png\";","import React from 'react';\nimport s from \"./Users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {userApi} from \"../../api/api\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    //  follow: (userid: string) => void\n    // UnFollow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    //toglFolowingInProgress:(isFetching: boolean, userId: string)=>void\n    // setCurrentPage: (pageNumber: number) => void\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    return <div>\n        <div>\n            {\n                pages.map(p => {\n                    return <span key={p} className={props.currentPage === p ? s.selectedPage : \"\"}\n                                 onClick={(e) => {\n                                     props.onPageChanged(p)\n                                 }}>{p}</span>\n                })}\n        </div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                       <img alt={'photo'} src={u.photos.small !== null ? u.photos.small : userPhoto}\n                            className={s.usersPhoto}/>\n                       </NavLink>\n                <div>\n                    {u.followed\n                        ? <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.unFolluwThunk(u.id)\n                            /*props.toglFolowingInProgress(true,u.id)\n                           userApi.getUnFollow(+u.id)\n                                .then((data) => {\n                                    if (data.resultCode === 0) {\n                                        props.UnFollow(u.id)}\n                                    props.toglFolowingInProgress(false,u.id)\n                                })*/\n\n                        }}>unfollow</button>\n\n                        : <button disabled={props.folowingInProgres.some(id => id === u.id)} onClick={() => {\n                            props.FolluwThunk(u.id)\n                            /*props.toglFolowingInProgress(true,u.id)\n                            userApi.getFollow(+u.id)\n                                .then((data) => {if (data.resultCode === 0) {\n                                        props.follow(u.id)}\n                                    props.toglFolowingInProgress(false,u.id)\n                                })*/\n\n                        }}>follow</button>}\n                </div>\n            </div>\n   </span>\n                <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                   <div>{\"u.location.contry\"}</div>\n                   <div>{\"u.location.city\"}</div>\n               </span>\n            </span>\n            </div>)\n        }\n\n\n    </div>;\n\n\n}\n\n\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","import React from 'react';\nimport loader from \"../../assets/loading/loader.gif\";\n\n\n/*const Preloader=()=>{\n\n    return <img  src={loader} alt=''/>\n}\nexport default Preloader\n\n\nimport React from 'react';\nimport preloader from '../../15.gif';*/\n\n const Preloader = () => {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\nexport default Preloader\n","import {appStateType} from \"./redux.store\";\nimport {createSelector} from \"reselect\";\n\n\nexport const getUsersS = (state: appStateType)=>{\n    return  state.usersPeges.users\n}\n/*export const getUsersSelector = createSelector(getUsersS,(...arg)=>{\n    return  users\n})*/\nexport const getPageSizeS = (state: appStateType)=>{\n    return  state.usersPeges.pageSize\n}\nexport const getTotalCountS = (state: appStateType)=>{\n    return  state.usersPeges.totalCount\n}\n\nexport const getCurrentPageS = (state: appStateType)=>{\n    return  state.usersPeges.currentPage\n}\nexport const getIsFetchingS = (state: appStateType)=>{\n    return  state.usersPeges.isFetching\n}\nexport const getFolowingInProgressS = (state: appStateType)=>{\n    return  state.usersPeges.folowingInProgress\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {\n     FolluwThunk,\n    getUsersThunk,\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    unFolluwThunk,\n} from \"../../redux/users-reduser\";\nimport Users, {UsersType} from \"./Users\";\nimport Preloader from \"../common/Preloader\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPageS,\n    getFolowingInProgressS,\n    getIsFetchingS,\n    getPageSizeS,\n    getTotalCountS,\n    getUsersS\n} from \"../../redux/user-selectors\";\n\n\n\nexport type mapDispathToPropsType = {\n    //  follow: (userid: string) => void\n    //  unFolow: (userid: string) => void\n    //setUsers: (users: Array<UsersType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toglIsFetching: (isFetching: boolean) => void\n    // toglFolowingInProgress: (isFetching: boolean, userId: string) => void\n    getUsersThunk: (currentPage: number, pageSize: number) => void\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n\n}\n\ntype mapStateToPropsType = {\n    users: any\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress: Array<string>\n}\n\nexport type ResponseUsersType = {\n    error: any\n    items: Array<UsersType>\n    totalCount: number\n}\nexport type UsersPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass UsersContainet extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\n\n    }\n\n    onPageChanged = (pageNumber: number) => {\n\n        this.props.getUsersThunk(pageNumber, this.props.pageSize)\n\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null\n            }\n            <Users\n                // setUsers={this.props.setUsers}\n                //  setCurrentPage={this.props.setCurrentPage}\n                //follow={this.props.follow}\n                //UnFollow={this.props.unFolow}\n                //  toglFolowingInProgress={this.props.toglFolowingInProgress}\n                folowingInProgres={this.props.folowingInProgress}\n                unFolluwThunk={this.props.unFolluwThunk}\n                FolluwThunk={this.props.FolluwThunk}\n                currentPage={this.props.currentPage}\n                pageSize={this.props.pageSize}\n                totalCount={this.props.totalCount}\n                setTotalUsersCount={this.props.setTotalUsersCount}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n\n\n            />\n        </>\n    }\n}\n\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        users: getUsersS(state),\n        pageSize: getPageSizeS(state),\n        totalCount: getTotalCountS(state),\n        currentPage: getCurrentPageS(state),\n        isFetching: getIsFetchingS(state),\n        folowingInProgress: getFolowingInProgressS(state)\n    }\n}\n\n\nexport default compose(withAuthRedirect,connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n}))(UsersContainet)\n\n\n\n/*const  withRedirect = withAuthRedirect(UsersContainet)\n\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n})(withRedirect)*/","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n/*class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState( {\n            editMode: true\n        } );\n    }\n    deactivateEditMode() {\n        this.setState( {\n            editMode: false\n        } );\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status){\n            this.setState({\n                status: this.props.status\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={ this.activateEditMode }>{this.props.status || \"-------\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange}\n                           autoFocus={true}\n                           onBlur={ this.deactivateEditMode.bind(this) }\n                           value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}*/\n\nexport const ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)};\n\n        const deactivateEditMode = () => {\n            setEditMode(false)\n            props.updateStatus(status);\n        }\n\n        return (\n            <div>\n                {!editMode &&\n                <div>\n                    <span onDoubleClick={() => setEditMode(true)}>{props.status || \"-------\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}/>\n                </div>\n                }\n            </div>\n        )\n\n}\n","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\n\n\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img alt={'post'} src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n\n\n\n\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n\n                <AddNewPostReduxForm onSubmit={addPost}/>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'}  validate={[maxLength20, required]}name={'newPostBody'} component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nimport {ActionPageType, addPostActoinCreator,} from \"../../../redux/profile-reduser\";\n\n\n\ntype mapDispathToPropsType={\n    addPost: (value: string)=>void\n\n}\n\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ActionPageType) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: (value: string)=>{dispatch(addPostActoinCreator(value))},\n\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\nimport {newProfileType} from \"../../redux/profile-reduser\";\n\n\nexport type ProfileType = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, newProfileType, updateStatus} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {getUserProfile, getStatus, updateStatus}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logoutTC} from \"../../redux/auth-reduser\";\n\n\n\n\n\n\ntype mapStateToPropsType ={\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType= {\n\n    logoutTC : ()=>void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps,{\n    logoutTC}) (HeaderContainer)","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/formsControl/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reduser\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport { Redirect } from \"react-router-dom\";\nimport s from'../common/formsControl/FormsControl.module.css'\n\n\n\n\n\ntype FormDataType={\n    email: string\n    password: string\n    rememberMe: boolean\n\n}\n\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> =(props)=> {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'email'} validate={[required]} name={'email'} component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={'password'} validate={[required]} name={'password'} component={Input}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={'rememberMe'} component={Input}/>\n            </div>\n            { props.error && <div className={s.FormsControl}>\n                {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\n\nfunction Login(props: mapDispathToPropsType & mapStateToPropsType ) {\n\n    const onSubmit = (formData: FormDataType) => {\n        props.loginTC(formData.email, formData.password,formData.rememberMe)}\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n\n    return <div>\n        <div>Login</div>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n\n}\ntype mapDispathToPropsType={\n    loginTC : (email: string, password: string, rememberMe: boolean) =>void\n}\ntype mapStateToPropsType={\n    isAuth: boolean\n}\nconst mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return{\n        isAuth: state.auth.isAuth\n    }\n\n}\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps, {loginTC})(Login)","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport {Route, withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainet from \"./components/users/UsersContainer\";\r\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/header/header.container\";\r\nimport Login from \"./components/login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {appStateType} from \"./redux/redux.store\";\r\nimport {getAuthUserData, logoutTC} from \"./redux/auth-reduser\";\r\nimport {compose} from \"redux\";\r\nimport {initializedApp} from \"./redux/app-reduser\";\r\nimport Preloader from \"./components/common/Preloader\";\r\n\r\n\r\ntype mapDispathToPropsType= {\r\n    initializedApp: ()=>void\r\n}\r\n\r\ntype mapStateToPropsType ={\r\n    initialized: boolean\r\n}\r\n\r\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\r\n\r\nclass App extends React.Component<HeaderPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializedApp()\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        {\r\n            if(!this.props.initialized){\r\n                return <Preloader/>\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/users' render={() => <UsersContainet/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\r\n    return {\r\n\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\n\r\n/*export default compose(withRouter, connect(null,{\r\n    getAuthUserData})) (App)*/\r\n/*type PathParamsType = {\r\n    param1: string,\r\n}\r\n\r\n// Your component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & {\r\n    someString: string,\r\n}*/\r\n\r\n\r\nexport default compose(/*withRouter*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\r\n    initializedApp\r\n}))(App)","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from 'react-redux'\r\n\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux.store\";\r\nimport App from \"./App\";\r\n\r\n\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n      \r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>,\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__P0OFh\",\"error\":\"FormsControl_error__1g0kt\",\"FormsControl\":\"FormsControl_FormsControl__3L67z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__1Yu6Q\",\"selectedPage\":\"Users_selectedPage__3sYe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};"],"sourceRoot":""}