{"version":3,"sources":["components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css","components/profile/Myposts/Post/Post.module.css","serviceWorker.ts","redux/state.tsx","components/header/header.tsx","components/navbar/Navbar.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Profile.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/navbar/Navbar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","rerenderEntireTree","state","profilePage","messageForNewPost","posts","id","message","likekounts","dialogsPage","dialogs","name","messagesForMessages","messages","sidebar","addPost","postText","newPost","push","addMessage","postMessage","newMessage","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeClassLink","Profileinfo","discriptionBlock","Post","props","MyPosts","postsElements","map","p","useState","valueTextarea","setValuearea","postsBlock","onChange","e","currentTarget","value","onClick","Profile","DialogItem","dialog","active","Message","Dialogs","valueTextArea","setValueTextArea","messageElements","m","dialogsElements","d","dialogsItems","App","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.58168c85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nexport type PostsTypes = {\n    id: number\n    message: string\n    likekounts: number\n\n}\nexport type dialogsType = {\n    id: number\n    name: string\n}\nexport type MessagesType = {\n    id: number\n    message: string\n}\nexport type messagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n    messagesForMessages: string\n}\nexport type profilePageType = {\n    messageForNewPost: string\n    posts: Array<PostsTypes>\n}\ntype sidebar = {}\n\nexport type stateType = {\n    profilePage: profilePageType\n    dialogsPage: messagePageType\n    sidebar: {}\n}\nlet rerenderEntireTree = () =>{}\n\n\n\nconst state: stateType = {\n    profilePage: {\n        messageForNewPost: \"\",\n        posts: [\n            {id: 1, message: 'Hi, how are you*?', likekounts: 12},\n            {id: 2, message: 'its my first post', likekounts: 33},\n            {id: 3, message: 'go in iron', likekounts: 333},\n            {id: 3, message: 'its my life', likekounts: 333}\n        ],\n    },\n    dialogsPage: {\n        dialogs: [\n            {id: 1, name: \"Nastya\"},\n            {id: 2, name: \"Vlad\"},\n            {id: 3, name: \"Vika\"},\n            {id: 4, name: \"Andrey\"},\n            {id: 5, name: \"Vasia\"}\n        ],\n\n        messagesForMessages: \"\",\n        messages: [\n            {id: 1, message: \"hi how is your programmnig\"},\n            {id: 2, message: \"hi, its ok\\\"\"},\n            {id: 3, message: \"Good\"},\n            {id: 4, message: \"ok\"},\n            {id: 5, message: \"yo\"}\n        ]\n    },\n    sidebar: {}\n}\n\n\nexport let addPost = (postText: string) => {\n    debugger\n    state.profilePage.messageForNewPost = postText\n    let newPost: PostsTypes = {\n        id: 6,\n        likekounts: 0,\n        message: state.profilePage.messageForNewPost\n    }\n\n    state.profilePage.posts.push(newPost)\n\n    rerenderEntireTree()\n}\n\n\n\n\nexport let addMessage = (postMessage: string) => {\n    debugger\n    state.dialogsPage.messagesForMessages = postMessage\n    let newMessage: MessagesType = {\n        id: 6,\n        message: state.dialogsPage.messagesForMessages\n    }\n\n    state.dialogsPage.messages.push(newMessage)\n    rerenderEntireTree()\n}\n\n\n\nexport const subscribe = (observer:()=>void)=>{\n    rerenderEntireTree=observer\n\n}\n\n\n\nexport default state\n\n","import React from 'react';\nimport s from \"./Header.module.css\"\n\ntype HeaderPropsType ={\n\n}\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\" activeClassName={s.activeClassLink}>Profile</NavLink>\n\n            </div>\n            <div className={s.item}>\n            <NavLink to=\"dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\n\n\n\n\nconst Profileinfo = () => {\n    return (\n        <div >\n            <div>\n                <img src=\"https://imgcomfort.com/Userfiles/Upload/images/illustration-geiranger.jpg\"/>\n            </div>\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n            </div>\n            </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id?: number\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent, useState} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/state\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (postText: string) => void\n\n\n\n}\n\n\nconst MyPosts = (props: MyPostsType) => {\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts}/>)\n    const [valueTextarea, setValuearea] =useState(\"\")\n\n    let AddPost = () => {\n        props.addPost(valueTextarea)\n        setValuearea(\"\")\n    }\n\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setValuearea(e.currentTarget.value)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                <textarea onChange={onPostChange}\n                          value={valueTextarea} />\n                </div>\n                <div>\n                    <button onClick={AddPost}>Add post</button>\n                </div>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts","import React from 'react';\nimport s from \"./Profile.module.css\";\n\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPosts from \"./Myposts/MyPosts\";\n\nimport { profilePageType} from \"../../redux/state\";\n\n\ntype ProfileType= {\n    profilePage: profilePageType\n    addPost: (postText: string) => void\n\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div >\n\n            <Profileinfo/>\n            <MyPosts posts={props.profilePage.posts}\n                     addPost={props.addPost} />\n\n            </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n\n\n\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport state from \"../../../redux/state\";\n\ntype DialogItemType={\n    id: number\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={\"dialogs/\" + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport state from \"../../../redux/state\";\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n\n\n\n    return (\n        <div className={s.dialog}>{props.message}</div>\n\n    )\n\n}\n\n\nexport default Message","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {messagePageType, stateType} from \"../../redux/state\";\n\ntype DialogsType ={\n    dialogsPage: messagePageType\n    addMessage: (postMessage: string) => void\n}\n\nconst Dialogs = (props: DialogsType) => {\n    const [valueTextArea, setValueTextArea] = useState(\"\")\n\n    let AddMessage = () =>{\n        props.addMessage(valueTextArea)\n    }\n\n let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n     setValueTextArea(e.currentTarget.value)\n }\n\n\n\n    let messageElements = props.dialogsPage.messages.map((m) =><Message message={m.message}/> )\n    let dialogsElements = props.dialogsPage.dialogs.map((d) =><DialogItem id={d.id} name={d.name}/> )\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n            </div>\n            <div className={s.messages}>\n                {messageElements}\n               <div> <textarea onChange={onMessageChange}\n                               value={valueTextArea} />\n                   <button onClick={AddMessage}>add message</button>\n               </div>\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header/header\";\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport Profile from \"./components/profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {stateType} from \"./redux/state\";\r\n\r\n\r\n\r\n// необхлдимо устоновить BrowserRouter. вся компонента окружается BrowserRouter\r\n// в компоненту добавляем Route\r\n// exact - точное совпадение адреса\r\n\r\ntype appType = {\r\n    state: stateType\r\n    addPost: (postText: string) => void\r\n    addMessage: (postMessage: string) => void\r\n\r\n\r\n}\r\n\r\nfunction App(props: appType) {\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/profile' render={() => <Profile\r\n\r\n                        profilePage={props.state.profilePage}\r\n                        addPost={props.addPost}\r\n\r\n                    />}/>\r\n                    <Route path='/dialogs' render={() => <Dialogs\r\n                        dialogsPage={props.state.dialogsPage}\r\n                        addMessage={props.addMessage}\r\n                    />}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport state, {subscribe} from \"./redux/state\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport {addMessage, addPost, stateType} from \"./redux/state\";\r\n\r\n const rerenderEntireTree = () => {\r\n    ReactDOM.render(<App state={state}\r\n                         addPost={addPost}\r\n\r\n                         addMessage={addMessage}/>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\nsubscribe(rerenderEntireTree)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};"],"sourceRoot":""}