{"version":3,"sources":["components/navbar/Navbar.module.css","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css","components/profile/Myposts/Post/Post.module.css","serviceWorker.ts","components/header/header.tsx","components/navbar/Navbar.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reduser.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Myposts/MyPostsContainer.tsx","components/profile/Profile.tsx","redux/dialogs-reduser.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","redux/redux.store.ts","index.tsx","components/Dialogs/Dialogs.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeClassLink","Profileinfo","discriptionBlock","initialState","messageForNewPost","posts","id","v1","message","likekounts","profileReducer","state","action","type","text","newPost","newText","Post","props","MyPosts","postsElements","map","p","postsBlock","onChange","event","body","currentTarget","value","changeHandler","onClick","addPost","MyPostsContainer","connect","profilePage","dispatch","Profile","dialogs","name","messagesForMessages","messages","dialogsReducer","DialogItem","dialog","active","Message","Dialogs","messageElements","dialogsPage","m","dialogsElements","d","dialogsItems","placeholder","addMessage","DialogsContainer","App","path","render","rootReducer","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0b9048a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport s from \"./Header.module.css\"\n\n\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\" activeClassName={s.activeClassLink}>Profile</NavLink>\n\n            </div>\n            <div className={s.item}>\n            <NavLink to=\"dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\n\n\n\n\nconst Profileinfo = () => {\n    return (\n        <div >\n            <div>\n                <img src=\"https://imgcomfort.com/Userfiles/Upload/images/illustration-geiranger.jpg\"/>\n            </div>\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n            </div>\n            </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport {AddPostActionType, ChangeAllAddText, PostsTypes, profilePageType, UpdateNewPostTextType} from \"./store\";\nimport {v1} from \"uuid\";\n\nexport const addPostActoinCreator = (): AddPostActionType => ({\n        type: \"ADD-POST\",\n\n    }\n)\n\nexport const updateNewPostActionCreator = (text: string): UpdateNewPostTextType =>\n    ({\n        type: \"UPDATE-NEW-POST-TEXT\",\n        newText: text\n    })\n\n\nlet initialState: profilePageType = {\n    messageForNewPost: \"\",\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\nconst profileReducer = (state: profilePageType = initialState, action: ChangeAllAddText): profilePageType => {\n\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = state.messageForNewPost\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {...state,\n                posts:[...state.posts, newPost],\n                messageForNewPost: \"\"\n            }\n\n        case \"UPDATE-NEW-POST-TEXT\":\n            return {...state, messageForNewPost: action.newText}\n        default:\n            return state\n    }\n\n}\n\n\n\nexport default profileReducer\n\n\n\n","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport { PostsTypes} from \"../../../redux/store\";\n\n\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    messageForNewPost: string\n    addPost: ()=>void\n    changeHandler: (body: string)=>void\n\n}\n\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n    const addPost = () => {\n        props.addPost()\n    }\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                <textarea onChange={changeHandler}\n                          value={props.messageForNewPost}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts","import React from 'react';\nimport {addPostActoinCreator, updateNewPostActionCreator} from \"../../../redux/profile-reduser\";\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nimport {ChangeAllAddText} from \"../../../redux/store\";\n\n\n\n\n\n/*type MyPostsType = {\n   store?: StoreReduxType\n\n}*/\n\ntype mapDispathToPropsType={\n    addPost: ()=>void\n    changeHandler: (body: string)=>void\n}\n\n\n/*const MyPostsContainer = (props: MyPostsType) => {\n\n    return (\n        <StoreContext.Consumer>{\n            (store)  =>{\n\n                const addPost = () => {\n                    let state = store.getState()\n                    if (state.profilePage.messageForNewPost.trim()) {\n                        store.dispatch(addPostActoinCreator(state.profilePage.messageForNewPost))\n                    } else {\n                        store.dispatch(updateNewPostActionCreator(\"\"))\n                    }\n                }\n                const changeHandler = (body: string) => {\n                    store.dispatch(updateNewPostActionCreator(body))\n                }\n                return <MyPosts\n            messageForNewPost={store.getState().profilePage.messageForNewPost}\n            posts={store.getState().profilePage.posts}\n            addPost={addPost}\n            changeHandler={changeHandler}\n        />}}\n        </StoreContext.Consumer>\n    )\n}*/\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n        messageForNewPost: state.profilePage.messageForNewPost,\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ChangeAllAddText) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: ()=>{dispatch(addPostActoinCreator())},\n        changeHandler: (body: string)=>{dispatch(updateNewPostActionCreator(body))}\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport {StoreReduxType} from \"../../redux/redux.store\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\n\n\ntype ProfileType = {\n    store?: StoreReduxType\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo/>\n            <MyPostsContainer\n            />\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    MessagePageType,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\nexport const addMessageActoinCreator = ():addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    /*postMessage: title*/\n})\n\n\nexport const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n    messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n/*type DialogsReducerType={\n    action: (action: ChangeAllAddText)=>void\n    state: MessagePageType\n}*/\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = state.messagesForMessages\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n                messagesForMessages: \"\"\n            }\n        case \"UPDATE-NEW-MESSAGE-TEXT\":\n            return {...state, messagesForMessages: action.newText}\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={\"dialogs/\" + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n    return (\n        <div className={s.dialog}>{props.message}</div>\n\n    )\n\n}\n\n\nexport default Message\n","import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport { MessagePageType} from \"../../redux/store\";\n\n\n\n\n\ntype DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: ()=> void\n    changeHandler:(body: any)=> void\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n\n    const addMessage = ()=>{\n        props.addMessage()\n    }\n    const changeHandler =(event: ChangeEvent<HTMLTextAreaElement>)=>{\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <div>\n                    <div> <textarea placeholder=\"Enter your message\"\n                                    onChange={changeHandler}\n                                    value={props.dialogsPage.messagesForMessages}/>\n                    </div>\n                    <div> <button onClick={addMessage}>add message</button> </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs","import React from 'react';\nimport {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, UpdateNewMessageCreator} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\n\n\n\n\n\n/*type DialogsType = {\n    store?: StoreReduxType\n}*/\n\ntype mapDispathToPropsType={\n    addMessage: ()=>void\n    changeHandler: (body: any)=>void\n}\n/*const DialogsContainer = (props: DialogsType) => {\n\n\n    return (\n        <StoreContext.Consumer>{\n            (store)=>{\n                //const store = props.store.getState().dialogsPage\n                const state= store.getState()\n\n                const addMessage = ()=>{\n                    if (state.dialogsPage.messagesForMessages.trim()) {\n                        store.dispatch(addMessageActoinCreator(state.dialogsPage.messagesForMessages))\n                    } else {\n                        store.dispatch(UpdateNewMessageCreator(\"\"))\n                    }\n                }\n                const changeHandler =(body: any)=>{\n                    store.dispatch(UpdateNewMessageCreator(body))\n                }\n\n\n         return   <Dialogs\n                addMessage={addMessage}\n                changeHandler={changeHandler}\n                dialogsPage={state.dialogsPage}\n            />}}\n        </StoreContext.Consumer>\n\n)\n\n}*/\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n        dialogsPage: state.dialogsPage\n    }\n\n}\n\nlet mapDispathToProps=(dispatch:(action: ChangeAllAddText) => void ):mapDispathToPropsType=>{\n    return{\n        addMessage: ()=>{ dispatch(addMessageActoinCreator())},\n        changeHandler: (body: any)=>{dispatch(UpdateNewMessageCreator(body))}\n    }}\n\n\n\nconst DialogsContainer=connect(mapStateToProps,mapDispathToProps)(Dialogs)\n\n\n\n\nexport default DialogsContainer","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header/header\";\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport Profile from \"./components/profile/Profile\";\r\nimport {Route} from \"react-router-dom\";\r\n\r\nimport {StoreReduxType} from \"./redux/redux.store\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n\r\n\r\n\r\n\r\ntype appType = {\r\n    Store?: StoreReduxType\r\n    dispatch?: any\r\n}\r\n\r\nfunction App(props: appType) {\r\n\r\n\r\n    return (\r\n\r\n        <div className='app-wrapper'>\r\n            <Header/>\r\n            <Navbar/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path='/profile' render={() => <Profile\r\n                />}/>\r\n                <Route path='/dialogs' render={() => <DialogsContainer\r\n                />}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import {combineReducers, createStore} from \"redux\";\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\n\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer)\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from 'react-redux'\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux.store\";\r\n\r\n\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n      \r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>,\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n// @ts-ignor\r\n/*store.subscribe(rerenderEntireTree)*/\r\n\r\n/*\r\nrerenderEntireTree(store.getState())\r\nstore.subscribe(()=>{\r\n    let state=store.getState()\r\n    rerenderEntireTree(state)\r\n})\r\n*/\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};"],"sourceRoot":""}