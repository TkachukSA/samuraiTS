{"version":3,"sources":["components/navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/users/Users.module.css","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css","components/profile/Myposts/Post/Post.module.css","serviceWorker.ts","components/navbar/Navbar.tsx","redux/dialogs-reduser.ts","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/users-reduser.ts","assets/images/user.png","components/users/Users.tsx","assets/loading/loader.gif","components/common/Preloader.tsx","components/users/UsersContainer.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","redux/profile-reduser.ts","components/profile/Myposts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/header/header.tsx","redux/auth-reduser.ts","components/header/header.container.tsx","App.tsx","redux/redux.store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","activeClassLink","initialState","dialogs","id","v1","name","messagesForMessages","messages","message","dialogsReducer","state","action","type","text","newText","DialogItem","props","dialog","active","Message","Dialogs","messageElements","dialogsPage","map","m","dialogsElements","d","dialogsItems","placeholder","onChange","event","body","currentTarget","value","changeHandler","onClick","addMessage","DialogsContainer","connect","dispatch","users","pageSize","totalCount","currentPage","isFetching","usersReducer","u","userid","followed","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","e","onPageChanged","src","photos","small","userPhoto","usersPhoto","UnFollow","follow","status","Preloader","loader","UsersContainet","pageNumber","setCurrentPage","toglIsFetching","axios","get","then","response","setUsers","data","items","setTotalUsersCount","this","unFolow","React","Component","usersPeges","Profileinfo","profile","alt","discriptionBlock","fullName","large","Post","likekounts","MyPosts","postsElements","posts","postsBlock","messageForNewPost","addPost","profileReducer","newPost","MyPostsContainer","profilePage","Profile","ProfileContainer","userId","params","setUsersProfile","WithUrlDataContainerComponent","withRouter","Header","header","loginBlock","isAuth","login","email","authReducer","HeaderContainer","withCredentials","resultCode","setAuthUserData","auth","App","path","render","rootReducer","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,gBAAkB,kC,mBCA1FD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCAlLD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,aAAe,8B,mBCAxED,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,mBCAnED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,wCCA/DD,EAAOC,QAAU,CAAC,KAAO,qB,kHCWLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DCiBSC,EA3BA,WACX,OACI,sBAAKC,UAAWC,IAAEC,IAAlB,UACI,qBAAKF,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,WAAYC,gBAAiBJ,IAAEK,gBAA3C,uBAGJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACA,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,gBAA1C,wBAEA,qBAAKN,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAEK,gBAAxC,qBAIJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACA,uCAEA,qBAAKH,UAAWC,IAAEE,KAAlB,SACA,wCAEA,qBAAKH,UAAWC,IAAEE,KAAlB,SACA,+C,8BCTRI,EAA8B,CAC9BC,QAAS,CACL,CAACC,GAAIC,cAAMC,KAAM,UACjB,CAACF,GAAIC,cAAMC,KAAM,QACjB,CAACF,GAAIC,cAAMC,KAAM,QACjB,CAACF,GAAIC,cAAMC,KAAM,UACjB,CAACF,GAAIC,cAAMC,KAAM,UAErBC,oBAAqB,GACrBC,SAAU,CACN,CAACJ,GAAIC,cAAMI,QAAS,8BACpB,CAACL,GAAIC,cAAMI,QAAS,eACpB,CAACL,GAAIC,cAAMI,QAAS,QACpB,CAACL,GAAIC,cAAMI,QAAS,MACpB,CAACL,GAAIC,cAAMI,QAAS,QAuBbC,MAlBf,WAAwG,IAAhFC,EAA+E,uDAAvDT,EAAcU,EAAyC,uCAEnG,OAAQA,EAAOC,MACX,IAAK,cACD,IAAIC,EAAOH,EAAMJ,oBACjB,OAAO,2BACAI,GADP,IAEIH,SAAS,GAAD,mBAAMG,EAAMH,UAAZ,CAAsB,CAACJ,GAAIC,cAAMI,QAASK,KAClDP,oBAAqB,KAE7B,IAAK,0BACD,OAAO,2BAAII,GAAX,IAAkBJ,oBAAqBK,EAAOG,UAClD,QACI,OAAOJ,I,iBC/BJK,EAZI,SAACC,GAEhB,OACI,qBAAKtB,UAAWC,IAAEsB,OAAS,IAAMtB,IAAEuB,OAAnC,SACI,cAAC,IAAD,CAASpB,GAAI,WAAakB,EAAMb,GAAhC,SAAqCa,EAAMX,UCIxCc,EAVC,SAACH,GAEb,OACI,qBAAKtB,UAAWC,IAAEsB,OAAlB,SAA2BD,EAAMR,WC0C1BY,EArCC,SAACJ,GAGb,IASIK,EAAkBL,EAAMM,YAAYf,SAASgB,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAShB,QAASgB,EAAEhB,SAAcgB,EAAErB,OAC5FsB,EAAkBT,EAAMM,YAAYpB,QAAQqB,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAAYvB,GAAIuB,EAAEvB,GAAIE,KAAMqB,EAAErB,MAAWqB,EAAEvB,OAGtG,OACI,sBAAKT,UAAWC,IAAEO,QAAlB,UACI,qBAAKR,UAAWC,IAAEgC,aAAlB,SACKF,IAGL,sBAAK/B,UAAWC,IAAEY,SAAlB,UACI,oCAAOc,KACP,gCACI,oCAAM,0BAAUO,YAAY,qBACZC,SApBX,SAACC,GAClB,IAAMC,EAAOD,EAAME,cAAcC,MACjCjB,EAAMkB,cAAcH,IAmBQE,MAAOjB,EAAMM,YAAYhB,yBAEzC,oCAAM,wBAAQ6B,QA1BX,WACfnB,EAAMoB,cAyBY,yBAAN,iBCVLC,EALQC,aAfH,SAAC5B,GACjB,MAAM,CACFY,YAAaZ,EAAMY,gBAKL,SAACiB,GACnB,MAAM,CACFH,WAAY,WAAMG,EJdgD,CACtE3B,KAAM,iBIcFsB,cAAe,SAACH,GAAaQ,EJT2C,CAC5E3B,KAAM,0BACNE,QIOkEiB,QAK/CO,CAA2ClB,G,gCCwB9DnB,EAA+B,CAC/BuC,MAAO,GACPC,SAAU,EACVC,WAAY,IACZC,YAAa,EACbC,YAAY,GAgDDC,EA5CM,WAAkF,IAAjFnC,EAAgF,uDAAxDT,EAAcU,EAA0C,uCAElG,OAAQA,EAAOC,MACX,IAAK,SACD,OAAO,2BACAF,GADP,IAEI8B,MAAO9B,EAAM8B,MAAMjB,KAAI,SAAAuB,GACnB,OAAInC,EAAOoC,SAAWD,EAAE3C,GACb,2BAAI2C,GAAX,IAAcE,UAAU,IAErBF,OAGnB,IAAK,YACD,OAAO,2BACApC,GADP,IAEI8B,MAAO9B,EAAM8B,MAAMjB,KAAI,SAAAuB,GACnB,OAAInC,EAAOoC,SAAWD,EAAE3C,GACb,2BAAI2C,GAAX,IAAcE,UAAU,IAErBF,OAEnB,IAAK,WACD,OAAO,2BAAIpC,GAAX,IAAkB8B,MAAO7B,EAAO6B,QAEpC,IAAK,mBACD,OAAO,2BAAI9B,GAAX,IAAkBiC,YAAahC,EAAOgC,cAE1C,IAAK,wBACD,OAAO,2BAAIjC,GAAX,IAAkBgC,WAAY/B,EAAO+B,aAEzC,IAAK,kBACD,OAAO,2BAAIhC,GAAX,IAAkBkC,WAAYjC,EAAOiC,aAM7C,OAAOlC,G,iBCrGI,MAA0B,iCC+F1BuC,MAxDf,SAAejC,GAOP,IAFA,IAAIkC,EAAaC,KAAKC,KAAMpC,EAAM0B,WAAa1B,EAAMyB,UACjDY,EAAQ,GACJC,EAAI,EAAGA,GAAKJ,EAAYI,IAC5BD,EAAME,KAAKD,GACf,OAAO,gCACH,8BAGID,EAAM9B,KAAI,SAAAiC,GACP,OAAO,sBAAM9D,UAAYsB,EAAM2B,cAAea,EAAG7D,IAAE8D,aAAc,GACpDtB,QAAS,SAACuB,GAAQ1C,EAAM2C,cAAcH,IAD5C,SACmDA,SAI7DxC,EAAMwB,MAAMjB,KAAI,SAAAuB,GAAC,OAAI,gCAEnC,+BACU,gCACW,cAAC,IAAD,CAAShD,GAAI,YAAYgD,EAAE3C,GAA3B,SACA,qBAAKyD,IAAwB,OAAnBd,EAAEe,OAAOC,MAAgBhB,EAAEe,OAAOC,MAAOC,EAAWrE,UAAWC,IAAEqE,eAElF,8BACKlB,EAAEE,SACG,wBAAQb,QAAS,WAAKnB,EAAMiD,SAASnB,EAAE3C,KAAvC,sBACA,wBAAQgC,QAAS,WAAKnB,EAAMkD,OAAOpB,EAAE3C,KAArC,2BAIb,iCACG,iCACI,8BAAM2C,EAAEzC,OACR,8BAAMyC,EAAEqB,YAEZ,iCACG,8BAAM,sBACN,8BAAM,4BArBsBrB,EAAE3C,W,iBC1DlC,MAA0B,mCCO1BiE,EAHC,WACZ,OAAO,qBAAKR,IAAKS,KCuCfC,E,4MAaFX,cAAgB,SAACY,GACb,EAAKvD,MAAMwD,eAAeD,GAC1B,EAAKvD,MAAMyD,gBAAe,GAC1BC,IAAMC,IAAN,kEAAqEJ,EAArE,kBAAyF,EAAKvD,MAAMyB,WAC/FmC,MAAK,SAACC,GACH,EAAK7D,MAAMyD,gBAAe,GAC1B,EAAKzD,MAAM8D,SAASD,EAASE,KAAKC,OAClC,EAAKhE,MAAMiE,mBAAmBJ,EAASE,KAAKrC,gB,kEAlBnC,IAAD,OAChBwC,KAAKlE,MAAMyD,gBAAe,GAC1BC,IAAMC,IAAN,kEAAqEO,KAAKlE,MAAM2B,YAAhF,kBAAqGuC,KAAKlE,MAAMyB,WAC3GmC,MAAK,SAACC,GACH,EAAK7D,MAAMyD,gBAAe,GAC1B,EAAKzD,MAAM8D,SAASD,EAASE,KAAKC,OAClC,EAAKhE,MAAMiE,mBAAmBJ,EAASE,KAAKrC,iB,+BAgBpD,OAAO,qCACFwC,KAAKlE,MAAM4B,WAAY,cAAC,EAAD,IAAc,KAE1C,cAAC,EAAD,CAAOJ,MAAO0C,KAAKlE,MAAMwB,MACX0B,OAAQgB,KAAKlE,MAAMkD,OACnBD,SAAUiB,KAAKlE,MAAMmE,QACrBL,SAAUI,KAAKlE,MAAM8D,SACrBG,mBAAoBC,KAAKlE,MAAMiE,mBAC/BT,eAAgBU,KAAKlE,MAAMwD,eAC3B/B,SAAUyC,KAAKlE,MAAMyB,SACrBC,WAAYwC,KAAKlE,MAAM0B,WACvBC,YAAauC,KAAKlE,MAAM2B,YACxBgB,cAAeuB,KAAKvB,uB,GApCbyB,IAAMC,WAwDpB/C,eAbK,SAAC5B,GACjB,MAAO,CACH8B,MAAO9B,EAAM4E,WAAW9C,MACxBC,SAAU/B,EAAM4E,WAAW7C,SAC3BC,WAAYhC,EAAM4E,WAAW5C,WAC7BC,YAAajC,EAAM4E,WAAW3C,YAC9BC,WAAYlC,EAAM4E,WAAW1C,cAOiE,CAClGsB,OLnFkB,SAACnB,GAAD,MAAqC,CACnDnC,KAAM,SACNmC,OAAQA,IKkFZoC,QLhFmB,SAACpC,GAAD,MAAwC,CACvDnC,KAAM,YACNmC,OAAQA,IK+EZ+B,SL7EoB,SAACtC,GAAD,MAAkD,CAClE5B,KAAM,WACN4B,MAAOA,IK4EXgC,eLxE0B,SAAC7B,GAAD,MAAoD,CAC1E/B,KAAM,mBACN+B,YAAaA,IKuEjBsC,mBLrE8B,SAACvC,GAAD,MAAuD,CACjF9B,KAAM,wBACV8B,WAAYA,IKoEZ+B,eLlE0B,SAAC7B,GAAD,MAAoD,CAC1EhC,KAAM,kBACVgC,WAAYA,KK0DDN,CAOZgC,G,iBC9EYiB,EAlBK,SAACvE,GAClB,OAAIA,EAAMwE,QAIL,gCACI,8BACI,qBAAK5B,IAAI,4EAA4E6B,IAAK,SAE9F,sBAAK/F,UAAWC,IAAE+F,iBAAlB,6BAEI,8BAAM1E,EAAMwE,QAAQG,WACpB,qBAAK/B,IAAK5C,EAAMwE,QAAQ3B,OAAO+B,cAVjC,cAAC,EAAD,K,kCCYCC,EAfF,SAAC7E,GAEV,OACI,sBAAKtB,UAAWC,IAAEE,KAAlB,UACI,qBAAK+D,IAAI,kJACR5C,EAAMR,QAEP,8BACA,iCAAOQ,EAAM8E,WAAb,iBCkCGC,EApCC,SAAC/E,GAEb,IAAIgF,EAAgBhF,EAAMiF,MAAM1E,KAAI,SAAAiC,GAAC,OAAI,cAAC,EAAD,CAAMhD,QAASgD,EAAEhD,QAASsF,WAAYtC,EAAEsC,WAAY3F,GAAIqD,EAAErD,IAASqD,EAAErD,OAa9G,OACI,sBAAKT,UAAWC,IAAEuG,WAAlB,UACI,0CACA,gCACI,8BACA,0BAAUrE,SAXA,SAACC,GACnB,IAAIC,EAAOD,EAAME,cAAcC,MAC/BjB,EAAMkB,cAAcH,IAUFE,MAAOjB,EAAMmF,sBAEvB,8BACI,wBAAQhE,QAnBR,WACZnB,EAAMoF,WAkBM,2BAIR,qBAAK1G,UAAWC,IAAEsG,MAAlB,SACKD,QCKb/F,EAAmC,CACnCuF,QAAS,KACTW,kBAAmB,GACnBF,MAAO,CACH,CAAC9F,GAAIC,cAAMI,QAAS,oBAAqBsF,WAAY,IACrD,CAAC3F,GAAIC,cAAMI,QAAS,oBAAqBsF,WAAY,IACrD,CAAC3F,GAAIC,cAAMI,QAAS,aAAcsF,WAAY,KAC9C,CAAC3F,GAAIC,cAAMI,QAAS,cAAesF,WAAY,OA4CxCO,EAvCQ,WAA4F,IAA3F3F,EAA0F,uDAA9DT,EAAcU,EAAgD,uCAE9G,OAAQA,EAAOC,MACX,IAAK,WACD,IAAIC,EAAOH,EAAMyF,kBACbG,EAAsB,CACtBnG,GAAIC,cACJ0F,WAAY,EACZtF,QAASK,GAEb,OAAO,2BAAIH,GAAX,IACIuF,MAAM,GAAD,mBAAKvF,EAAMuF,OAAX,CAAkBK,IACvBH,kBAAmB,KAG3B,IAAK,uBACD,OAAO,2BAAIzF,GAAX,IAAkByF,kBAAmBxF,EAAOG,UAChD,IAAK,mBACJ,OAAO,2BAAOJ,GAAd,IAAqB8E,QAAS7E,EAAO6E,UACtC,QACI,OAAO9E,ICjDJ6F,EAFQjE,aAdH,SAAC5B,GACjB,MAAM,CACFyF,kBAAmBzF,EAAM8F,YAAYL,kBACrCF,MAAOvF,EAAM8F,YAAYP,UAIX,SAAC1D,GACnB,MAAM,CACF6D,QAAS,WAAK7D,ED6DwC,CACtD3B,KAAM,cC7DNsB,cAAe,SAACH,GAAgBQ,EDgE4C,CAChF3B,KAAM,uBACNE,QClEwEiB,QAIrDO,CAA4CyD,GCXpDU,EAVC,SAACzF,GAEb,OACI,gCACI,cAAC,EAAD,CAAawE,QAASxE,EAAMwE,UAC5B,cAAC,EAAD,QCcNkB,G,kLAEmB,IAAD,OACZC,EAAOzB,KAAKlE,MAAMxB,MAAMoH,OAAOD,OAC/BA,IACAA,EAAO,KACXjC,IAAMC,IAAI,wDAA0DgC,GAC/D/B,MAAK,SAACC,GAEH,EAAK7D,MAAM6F,gBAAgBhC,EAASE,W,+BAK5C,OACI,8BACI,cAAC,EAAD,2BAAaG,KAAKlE,OAAlB,IAAyBwE,QAASN,KAAKlE,MAAMwE,iB,GAhB9BJ,IAAMC,WA4BjCyB,GAA+BC,YAAWL,IAE/BpE,gBARK,SAAC5B,GACjB,MAAO,CACH8E,QAAS9E,EAAM8F,YAAYhB,WAMmE,CAClGqB,gBHmC2B,SAACrB,GAAD,MAAkD,CAC7E5E,KAAM,mBACN4E,aGtCWlD,CAEZwE,I,oBCrCYE,GAZA,SAAChG,GACZ,OACI,yBAAQtB,UAAWC,KAAEsH,OAArB,UACI,qBAAKrD,IAAI,uFAET,qBAAKlE,UAAWC,KAAEuH,WAAlB,SACKlG,EAAMmG,OAAQnG,EAAMoG,MAAO,cAAC,IAAD,CAAStH,GAAG,SAAZ,yBCUxCG,GAA6B,CAEzBE,GAAI,KACJkH,MAAO,KACPD,MAAO,KACRD,QAAQ,GAmBAG,GAfK,WAAgF,IAA/E5G,EAA8E,uDAAvDT,GAAcU,EAAyC,uCAE/F,OAAQA,EAAOC,MACX,IAAK,gBACD,OAAO,uCAAIF,GACJC,GADP,IAEIwG,QAAQ,IAGpB,OAAOzG,GCzBL6G,G,kLAEmB,IAAD,OAEhB7C,IAAMC,IAAN,uDAAiE,CAC7D6C,iBAAiB,IAEhB5C,MAAK,SAACC,GACH,GAA8B,IAA3BA,EAASE,KAAK0C,WAAe,CAAC,IAAD,EACJ5C,EAASE,KAAKA,KAAhC5E,EADsB,EACtBA,GAAIkH,EADkB,EAClBA,MAAOD,EADW,EACXA,MACjB,EAAKpG,MAAM0G,gBAAgBvH,EAAIkH,EAAOD,S,+BAKlD,OAAO,cAAC,GAAD,eAAYlC,KAAKlE,Y,GAfFoE,IAAMC,WA2BrB/C,gBAPK,SAAC5B,GACjB,MAAO,CACHyG,OAAQzG,EAAMiH,KAAKR,OACnBC,MAAO1G,EAAMiH,KAAKP,SAIyE,CAACM,gBD3CrE,SAACvH,EAAYkH,EAAeD,GAA5B,MAAqE,CAC5FxG,KAAM,gBAAiBT,KAAIkH,QAAOD,WC0C3B9E,CAAwGiF,IChBxGK,OAlBf,WAGI,OAEI,sBAAKlI,UAAU,cAAf,UACI,cAAC,GAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACI,cAAC,IAAD,CAAOmI,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,c,SChB7CC,GAAcC,aAAgB,CAChC1G,YAAab,EACb+F,YAAaH,EACbf,WAAYzC,EACZ8E,KAAML,KAYKW,GALDC,aAAYH,ICLtBI,IAASL,OAEL,eAAC,IAAD,WACI,cAAC,IAAD,CAAUG,MAAOA,GAAjB,SACI,cAAC,GAAD,MAFR,OAKAG,SAASC,eAAe,SzBqH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpI,c","file":"static/js/main.e2a85c99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__1Yu6Q\",\"selectedPage\":\"Users_selectedPage__3sYe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","\nimport {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n    MessagePageType,\n    UpdateNewMessageType\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\nexport const addMessageActoinCreator = ():addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\",\n    /*postMessage: title*/\n})\n\n\nexport const UpdateNewMessageCreator = (title: string):UpdateNewMessageType => ({\n    type: \"UPDATE-NEW-MESSAGE-TEXT\",\n    newText: title\n})\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n    messagesForMessages: \"\",\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = state.messagesForMessages\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n                messagesForMessages: \"\"\n            }\n        case \"UPDATE-NEW-MESSAGE-TEXT\":\n            return {...state, messagesForMessages: action.newText}\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n    return (\n        <div className={s.dialog}>{props.message}</div>\n\n    )\n\n}\n\n\nexport default Message\n","import React, {ChangeEvent} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport { MessagePageType} from \"../../redux/store\";\n\n\n\n\n\ntype DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: ()=> void\n    changeHandler:(body: any)=> void\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n\n    const addMessage = ()=>{\n        props.addMessage()\n    }\n    const changeHandler =(event: ChangeEvent<HTMLTextAreaElement>)=>{\n        const body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <div>\n                    <div> <textarea placeholder=\"Enter your message\"\n                                    onChange={changeHandler}\n                                    value={props.dialogsPage.messagesForMessages}/>\n                    </div>\n                    <div> <button onClick={addMessage}>add message</button> </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs","import React from 'react';\nimport {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, UpdateNewMessageCreator} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\n\n\n\ntype mapDispathToPropsType={\n    addMessage: ()=>void\n    changeHandler: (body: any)=>void\n}\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n        dialogsPage: state.dialogsPage\n    }\n\n}\n\nlet mapDispathToProps=(dispatch:(action: ChangeAllAddText) => void ):mapDispathToPropsType=>{\n    return{\n        addMessage: ()=>{ dispatch(addMessageActoinCreator())},\n        changeHandler: (body: any)=>{dispatch(UpdateNewMessageCreator(body))}\n    }}\n\n\n\nconst DialogsContainer=connect(mapStateToProps,mapDispathToProps)(Dialogs)\n\n\n\n\nexport default DialogsContainer","import {UsersType} from \"../components/users/Users\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\n\nexport const follow = (userid: string):folowActionType => ({\n        type: \"FOLLOW\",\n        userid: userid\n    })\nexport const unFolow = (userid: string): unFolowActionType => ({\n        type: \"UN-FOLLOW\",\n        userid: userid\n    })\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n        type: \"SETUSERS\",\n        users: users\n    })\n\n\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n        type: \"SET-CURRENT-PAGE\",\n        currentPage: currentPage\n    })\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n        type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n    })\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n        type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n    })\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 5,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n\n    }\n\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\n\n\n","export default __webpack_public_path__ + \"static/media/user.ab6315c9.png\";","import React from 'react';\nimport  s from \"./Users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\n\n\n\nexport type UsersType={\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType={\n    users: Array<UsersType>\n    follow: (userid: string)=>void\n    UnFollow: (userid: string)=>void\n    setUsers: (users: Array<UsersType>)=>void\n    setTotalUsersCount:(totalCount: number)=>void\n    setCurrentPage: (pageNumber: number)=>void\n    onPageChanged : (pageNumber: number) =>void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n}\n\n\n\n\nfunction Users(props: UsersPropsType) {\n\n\n\n\n        let pagesCount = Math.ceil (props.totalCount / props.pageSize);\n        let pages = []\n        for(let i = 1; i <= pagesCount; i++ ){\n            pages.push(i)}\n        return <div>\n            <div>\n\n                {\n                pages.map(p=>{\n                   return <span className={ props.currentPage=== p ?s.selectedPage: \"\"}\n                                onClick={(e) => { props.onPageChanged(p) }}>{p}</span>}) }\n            </div>\n\n            {\n                props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/'+u.id}>\n                       <img src={u.photos.small !== null? u.photos.small: userPhoto} className={s.usersPhoto}/>\n                       </NavLink>\n                <div>\n                    {u.followed\n                        ? <button onClick={()=>{props.UnFollow(u.id)}}>unfollow</button>\n                        : <button onClick={()=>{props.follow(u.id)}}>follow</button> }\n                </div>\n            </div>\n   </span>\n             <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                   <div>{\"u.location.contry\"}</div>\n                   <div>{\"u.location.city\"}</div>\n               </span>\n            </span>\n                </div>)\n            }\n\n\n        </div>;\n\n\n\n}\n\n\n\n\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","import React from 'react';\nimport loader from \"../../assets/loading/loader.gif\";\n\n\nconst Preloader=()=>{\n    return <img src={loader}/>\n}\nexport default Preloader","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {\n    follow,\n    setCurrentPage,\n    setTotalUsersCount,\n    setUsers, toglIsFetching,\n    unFolow\n} from \"../../redux/users-reduser\";\nimport Users, { UsersType} from \"./Users\";\nimport axios, {AxiosResponse} from \"axios\";\nimport Preloader from \"../common/Preloader\";\n\n\n\n\ntype mapDispathToPropsType= {\n    follow: (userid: string) => void\n    unFolow: (userid: string) => void\n    setUsers: (users: Array<UsersType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toglIsFetching: (isFetching: boolean) => void\n}\n\ntype mapStateToPropsType ={\n    users: any\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n}\n\ntype ResponseUsersType = {\n    error: any\n    items: Array<UsersType>\n    totalCount: number\n}\nexport type UsersPropsType=mapStateToPropsType & mapDispathToPropsType\n\n\n\n\nclass UsersContainet extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.toglIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n            .then((response: AxiosResponse<ResponseUsersType>) => {\n                this.props.toglIsFetching(false)\n                this.props.setUsers(response.data.items)\n                this.props.setTotalUsersCount(response.data.totalCount)\n\n            })\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toglIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n            .then((response: AxiosResponse<ResponseUsersType>) => {\n                this.props.toglIsFetching(false)\n                this.props.setUsers(response.data.items);\n                this.props.setTotalUsersCount(response.data.totalCount)\n            });\n    }\n    render() {\n        return <>\n            {this.props.isFetching? <Preloader/>: null\n                }\n        <Users users={this.props.users}\n                      follow={this.props.follow}\n                      UnFollow={this.props.unFolow}\n                      setUsers={this.props.setUsers}\n                      setTotalUsersCount={this.props.setTotalUsersCount}\n                      setCurrentPage={this.props.setCurrentPage}\n                      pageSize={this.props.pageSize}\n                      totalCount={this.props.totalCount}\n                      currentPage={this.props.currentPage}\n                      onPageChanged={this.onPageChanged}\n        />\n        </>\n    }\n}\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return {\n        users: state.usersPeges.users,\n        pageSize: state.usersPeges.pageSize,\n        totalCount: state.usersPeges.totalCount,\n        currentPage: state.usersPeges.currentPage,\n        isFetching: state.usersPeges.isFetching\n    }\n}\n\n\n\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType, {}, appStateType>( mapStateToProps, {\n    follow,\n    unFolow,\n    setUsers,\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching\n})(UsersContainet)\n\n","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/Preloader\";\n\n\ntype Profileinfotype={\n    profile: newProfileType | null\n\n}\n\nconst Profileinfo = (props: Profileinfotype) => {\n   if(!props.profile){\n       return <Preloader/>\n   }\n    return (\n        <div >\n            <div>\n                <img src=\"https://imgcomfort.com/Userfiles/Upload/images/illustration-geiranger.jpg\" alt={'hi'}/>\n            </div>\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n            </div>\n            </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport { PostsTypes} from \"../../../redux/store\";\n\n\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    messageForNewPost: string\n    addPost: ()=>void\n    changeHandler: (body: string)=>void\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n\n    const addPost = () => {\n        props.addPost()\n    }\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = event.currentTarget.value\n        props.changeHandler(body)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                <textarea onChange={changeHandler}\n                          value={props.messageForNewPost}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts","import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\nexport type setUsersProfileType={\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\"\n}\nexport type UpdateNewPostTextType = {\n    type: \"UPDATE-NEW-POST-TEXT\"\n    newText: string\n}\nexport type ActionPageType=UpdateNewPostTextType | AddPostActionType | setUsersProfileType\n\nexport type newProfileType={\n    aboutMe: string\n    contacts:{\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube:  string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\ntype newProfilePageType={\n    profile:newProfileType | null\n    messageForNewPost: string\n    posts: Array<PostsTypes>\n}\n\n\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    messageForNewPost: \"\",\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType ): newProfilePageType => {\n\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = state.messageForNewPost\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {...state,\n                posts:[...state.posts, newPost],\n                messageForNewPost: \"\"\n            }\n\n        case \"UPDATE-NEW-POST-TEXT\":\n            return {...state, messageForNewPost: action.newText}\n        case \"SET_USER_PROFILE\":\n         return    {...state, profile: action.profile}\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (): AddPostActionType => ({\n        type: \"ADD-POST\"\n    }\n)\nexport const updateNewPostActionCreator = (text: string): UpdateNewPostTextType => ({\n    type: \"UPDATE-NEW-POST-TEXT\",\n    newText: text\n})\nexport const setUsersProfile = (profile: newProfileType):setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\n\nexport default profileReducer\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nimport {ActionPageType, addPostActoinCreator, updateNewPostActionCreator} from \"../../../redux/profile-reduser\";\n\n\n\ntype mapDispathToPropsType={\n    addPost: ()=>void\n    changeHandler: (body: string)=>void\n}\n\n\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n        messageForNewPost: state.profilePage.messageForNewPost,\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ActionPageType) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: ()=>{dispatch(addPostActoinCreator())},\n        changeHandler: (body: string)=>{dispatch(updateNewPostActionCreator(body))}\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\nimport {newProfileType} from \"../../redux/profile-reduser\";\n\n\nexport type ProfileType = {\n    profile: newProfileType | null\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo profile={props.profile} />\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {connect} from \"react-redux\";\nimport {newProfileType, setUsersProfile} from \"../../redux/profile-reduser\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\n\n\n\n\ntype mapStateToPropsType ={\n    profile: newProfileType | null\n}\ntype mapDispathToPropsType={\n    setUsersProfile: (profile: newProfileType)=>void\n}\ntype PathParamType={\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType= RouteComponentProps <PathParamType> & ProfilePropsType\n\n\n\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId=this.props.match.params.userId\n        if(!userId){\n            userId='2'}\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId)\n            .then((response: AxiosResponse<any>) => {\n\n                this.props.setUsersProfile(response.data)\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps=(state: appStateType):mapStateToPropsType=>{\n    return {\n        profile: state.profilePage.profile\n    }\n}\n\nlet WithUrlDataContainerComponent= withRouter(ProfileContainer)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    setUsersProfile\n})(WithUrlDataContainerComponent)\n\n\n","import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {AuthPageType} from \"../../redux/auth-reduser\";\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n\n            <div className={s.loginBlock}>\n                {props.isAuth? props.login: <NavLink to=\"/login\">Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\nexport default Header","\n\n\nexport type setUserDataActionType = { type: \"SET-USER-DATA\", id: number, email: string , login: string }\n\nexport const setAuthUserData = (id: number, email: string, login: string):setUserDataActionType => ({\n        type: \"SET-USER-DATA\", id, email, login\n    })\n\n\n\nexport type ActionAuthType= setUserDataActionType\n\n\n\nexport type AuthPageType={\n    id: number | null\n    email: string | null\n    login: string |null\n    isAuth: boolean\n}\n\n//export type AuthPageType={\n//    data: AuthDateType\n//    isAuth: boolean\n//}\n\n\nlet initialState :AuthPageType = {\n\n        id: null,\n        email: null,\n        login: null,\n       isAuth: false\n}\n\n\nconst authReducer = (state: AuthPageType  = initialState, action: ActionAuthType): AuthPageType => {\n\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {...state,\n                ...action,\n                isAuth: true\n            }\n    }\n    return state\n\n}\n\n\n\nexport default authReducer\n\n\n\n","import React from 'react';\nimport Header from \"./header\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport { setAuthUserData} from \"../../redux/auth-reduser\";\n\n\n\n\n\ntype mapStateToPropsType ={\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType= {\n    setAuthUserData: (id: number, email: string, login: string)=>void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n    componentDidMount() {\n        debugger\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`,{\n            withCredentials: true\n        })\n            .then((response: AxiosResponse<any>) => {\n                if(response.data.resultCode===0){\n                    let { id, email, login}=response.data.data\n                    this.props.setAuthUserData(id, email, login)\n                }})\n    }\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps=(state:appStateType):mapStateToPropsType=>{\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType,mapDispathToPropsType,{}, appStateType>(mapStateToProps,{setAuthUserData}) (HeaderContainer)","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header/header\";\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport {Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainet from \"./components/users/UsersContainer\";\r\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/header/header.container\";\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n\r\n        <div className='app-wrapper'>\r\n            <HeaderContainer/>\r\n            <Navbar/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                <Route path='/users' render={() => <UsersContainet/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import {combineReducers, createStore} from \"redux\";\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport usersReducer from \"./users-reduser\";\nimport authReducer from \"./auth-reduser\";\n\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPeges: usersReducer,\n    auth: authReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer)\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from 'react-redux'\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux.store\";\r\n\r\n\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n      \r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>,\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n// @ts-ignor\r\n/*store.subscribe(rerenderEntireTree)*/\r\n\r\n/*\r\nrerenderEntireTree(store.getState())\r\nstore.subscribe(()=>{\r\n    let state=store.getState()\r\n    rerenderEntireTree(state)\r\n})\r\n*/\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}