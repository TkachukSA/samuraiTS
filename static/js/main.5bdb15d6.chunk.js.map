{"version":3,"sources":["components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css","components/profile/Myposts/Post/Post.module.css","serviceWorker.ts","components/header/header.tsx","components/navbar/Navbar.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","redux/profile-reduser.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Profile.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","redux/dialogs-reduser.tsx","components/Dialogs/Dialogs.tsx","redux/store.tsx","App.tsx","redux/redux.store.ts","index.tsx","components/Dialogs/Dialogs.module.css","components/navbar/Navbar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeClassLink","Profileinfo","discriptionBlock","Post","props","message","likekounts","updateNewPostActionCreator","text","type","newText","initialState","messageForNewPost","posts","id","profileReducer","state","action","newPost","postText","push","MyPosts","postsElements","map","p","postsBlock","onChange","event","dispatch","currentTarget","value","onClick","trim","Profile","profilePage","DialogItem","dialog","active","name","Message","dialogs","messagesForMessages","messages","dialogsReducer","postMessage","newMessage","Dialogs","useState","valueTextArea","setValueTextArea","messageElements","dialogsPage","m","dialogsElements","d","dialogsItems","placeholder","e","App","Store","getState","path","render","bind","rootReducer","combineReducers","store","createStore","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5bdb15d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport s from \"./Header.module.css\"\n\ntype HeaderPropsType ={\n\n}\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\n//NavLink - ссылка котроя не обновляет полностью страницу\n// to=\"/profile\" - пишется без точек\n// activeClassName - описано в сисс (цвет активной ссылки)\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\" activeClassName={s.activeClassLink}>Profile</NavLink>\n\n            </div>\n            <div className={s.item}>\n            <NavLink to=\"dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\n\n\n\n\nconst Profileinfo = () => {\n    return (\n        <div >\n            <div>\n                <img src=\"https://imgcomfort.com/Userfiles/Upload/images/illustration-geiranger.jpg\"/>\n            </div>\n            <div className={s.discriptionBlock}>\n                ava + discriphon\n            </div>\n            </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id?: number\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React from 'react';\nimport {AddPostActionType, ChangeAllAddText, PostsTypes, profilePageType, UpdateNewPostTextType} from \"./store\";\n\nexport const addPostActoinCreator = (text: string): AddPostActionType => ({\n        type: \"ADD-POST\",\n        postText: text\n    }\n)\n\nexport const updateNewPostActionCreator = (text: string): UpdateNewPostTextType =>\n    ({\n        type: \"UPDATE-NEW-POST-TEXT\",\n        newText: text\n    })\n\n\nlet initialState: profilePageType = {\n    messageForNewPost: \"\",\n    posts: [\n        {id: 1, message: 'Hi, how are you*?', likekounts: 12},\n        {id: 2, message: 'its my first post', likekounts: 33},\n        {id: 3, message: 'go in iron', likekounts: 333},\n        {id: 3, message: 'its my life', likekounts: 333}\n    ],\n}\n\nconst profileReducer = (state: profilePageType = initialState, action: ChangeAllAddText): profilePageType => {\n    debugger\n    switch (action.type) {\n        case \"ADD-POST\":\n            let newPost: PostsTypes = {\n                id: 6,\n                likekounts: 0,\n                message: action.postText\n            }\n\n            state.posts.push(newPost)\n            state.messageForNewPost = \"\"\n            return {...state}\n        case \"UPDATE-NEW-POST-TEXT\":\n            debugger\n            return {...state, messageForNewPost: action.newText}\n        default:\n            return state\n    }\n\n}\n\n\n\nexport default profileReducer\n\n\n\n","import React, {ChangeEvent, useState} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {ChangeAllAddText, PostsTypes} from \"../../../redux/store\";\nimport {addPostActoinCreator, updateNewPostActionCreator} from \"../../../redux/profile-reduser\";\nimport store from \"../../../redux/redux.store\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    dispatch: any\n    messageForNewPost: string\n\n}\n\n\nconst MyPosts = (props: MyPostsType) => {\n    debugger\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts}/>)\n   /* const [valueTextarea, setValuearea] =useState(\"\")*/\n/*\n\n    let AddPost = () => {\n    //    props.addPost(valueTextarea)\n        props.dispatch(addPostActoinCreator(valueTextarea))\n        setValuearea(\"\")\n    }\n\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setValuearea(e.currentTarget.value)\n    }\n*/\n\n\n\n\n    const addPost = () => {\n        if (props.messageForNewPost.trim()) {\n            props.dispatch(addPostActoinCreator(props.messageForNewPost))\n\n        } else {\n            props.dispatch(updateNewPostActionCreator(\"\"))\n\n        }\n    }\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\ndebugger\n        props.dispatch(updateNewPostActionCreator(event.currentTarget.value))//dispatch?\n    }\n\n\n\n\n\n\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                <textarea onChange={changeHandler}\n                          value={props.messageForNewPost} />\n                </div>\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts","import React from 'react';\nimport s from \"./Profile.module.css\";\n\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPosts from \"./Myposts/MyPosts\";\n\nimport {ChangeAllAddText, profilePageType} from \"../../redux/store\";\n\n\ntype ProfileType= {\n    profilePage: profilePageType\n    dispatch: any\n\n}\n\nconst Profile = (props: ProfileType) => {\ndebugger\n    return (\n        <div >\n\n            <Profileinfo/>\n            <MyPosts posts={props.profilePage.posts}\n                     dispatch={props.dispatch}\n                     messageForNewPost={props.profilePage.messageForNewPost}\n            />\n\n\n            </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n\n\n\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport state from \"../../../redux/store\";\n\ntype DialogItemType={\n    id: number\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={\"dialogs/\" + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\nexport default DialogItem","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport state from \"../../../redux/store\";\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n\n\n\n\n    return (\n        <div className={s.dialog}>{props.message}</div>\n\n    )\n\n}\n\n\nexport default Message","import React from 'react';\nimport {ChangeAllAddText, messagePageType, MessagesType, PostsTypes, profilePageType, StroreType} from \"./store\";\n\n\nexport const addMessageActoinCreator =(postMessage: string) =>{\n    return { type: \"ADD-MESSAGE\", postMessage} as const\n}\n\nlet initialState:messagePageType ={\n    dialogs: [\n        {id: 1, name: \"Nastya\"},\n        {id: 2, name: \"Vlad\"},\n        {id: 3, name: \"Vika\"},\n        {id: 4, name: \"Andrey\"},\n        {id: 5, name: \"Vasia\"}\n    ],\n\n    messagesForMessages: \"\",\n    messages: [\n        {id: 1, message: \"hi how is your programmnig\"},\n        {id: 2, message: \"hi, its ok\\\"\"},\n        {id: 3, message: \"Good\"},\n        {id: 4, message: \"ok\"},\n        {id: 5, message: \"yo\"}\n    ]\n}\n\ntype DialogsReducerType={\n    action: (action: ChangeAllAddText)=>void\n    state: messagePageType\n}\nfunction dialogsReducer(state:messagePageType = initialState, action:ChangeAllAddText) {\n\n    if (action.type ===\"ADD-MESSAGE\" ){\n\n        state.messagesForMessages=(action.postMessage)\n        let newMessage: MessagesType = {\n            id: 6,\n            message: state.messagesForMessages\n        }\n\n        state.messages.push(newMessage)\n        //  this.rerenderEntireTree()\n\n    }return state\n}\n\nexport default dialogsReducer","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {addMessageActoinCreator, ChangeAllAddText, messagePageType, stateType} from \"../../redux/store\";\n\ntype DialogsType = {\n    dialogsPage: messagePageType\n    //   addMessage: (postMessage: string) => void\n    dispatch: (action: ChangeAllAddText) => void\n}\n\nconst Dialogs = (props: DialogsType) => {\n    const [valueTextArea, setValueTextArea] = useState(\"\")\n\n    let AddMessage = () => {\n        // props.addMessage(valueTextArea)\n        props.dispatch(addMessageActoinCreator(valueTextArea))\n        setValueTextArea(\"\")\n    }\n\n    let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        setValueTextArea(e.currentTarget.value)\n    }\n\n\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name}/>)\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <div>\n                <div> <textarea placeholder=\"Enter your message\"\n                                onChange={onMessageChange}\n                                value={valueTextArea}/>\n                </div>\n                   <div> <button onClick={AddMessage}>add message</button> </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs","import React from 'react';\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport saidbarReducer from \"./saidbar-reduser\";\n\n\n\nexport type PostsTypes = {\n    id: number\n    message: string\n    likekounts: number\n\n}\nexport type dialogsType = {\n    id: number\n    name: string\n}\nexport type MessagesType = {\n    id: number\n    message: string\n}\nexport type messagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n    messagesForMessages: string\n}\nexport type profilePageType = {\n    messageForNewPost: string\n    posts: Array<PostsTypes>\n}\ntype sidebar = {}\nexport type stateType = {\n    profilePage: profilePageType\n    dialogsPage: messagePageType\n    sidebar: {}\n}\n\n\n// определяет тип   .  тоже самое что и закоментрованное\n/*type ChengeAddPostType =ReturnType<typeof addPostActoinCreator>*/\ntype ChengeAddMessageType =ReturnType<typeof addMessageActoinCreator>\n\n\n\nexport type ChangeAllAddText = AddPostActionType | ChengeAddMessageType | UpdateNewPostTextType\n\nexport type StroreType ={\n    _state: stateType\n    addPost:(postText: string)=>void\n    addMessage:(postMessage: string)=>void\n    rerenderEntireTree:()=>void\n    subscribe: (observer:()=>void)=>void\n    getState:()=>stateType\n    dispatch: (action: ChangeAllAddText)=>void\n}\n\n\n//воспринимай как константу\n/*export const addPostActoinCreator =(postText: string) =>{\n    return { type: \"ADD-POST\", postText} as const\n}*/\nexport type AddPostActionType = {\n    type: \"ADD-POST\"\n    postText: string\n}\nexport type UpdateNewPostTextType = {\n    type: \"UPDATE-NEW-POST-TEXT\"\n    newText: string\n}\n\n\nexport const addMessageActoinCreator =(postMessage: string) =>{\n    return { type: \"ADD-MESSAGE\", postMessage} as const\n}\n\nconst store: StroreType ={\n    _state:  {\n        profilePage: {\n            messageForNewPost: \"\",\n            posts: [\n                {id: 1, message: 'Hi, how are you*?', likekounts: 12},\n                {id: 2, message: 'its my first post', likekounts: 33},\n                {id: 3, message: 'go in iron', likekounts: 333},\n                {id: 3, message: 'its my life', likekounts: 333}\n            ],\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: \"Nastya\"},\n                {id: 2, name: \"Vlad\"},\n                {id: 3, name: \"Vika\"},\n                {id: 4, name: \"Andrey\"},\n                {id: 5, name: \"Vasia\"}\n            ],\n\n            messagesForMessages: \"\",\n            messages: [\n                {id: 1, message: \"hi how is your programmnig\"},\n                {id: 2, message: \"hi, its ok\\\"\"},\n                {id: 3, message: \"Good\"},\n                {id: 4, message: \"ok\"},\n                {id: 5, message: \"yo\"}\n            ]\n        },\n        sidebar: {}\n    },\n    addPost(postText: string)  {\n        debugger\n        this._state.profilePage.messageForNewPost = postText\n        let newPost: PostsTypes = {\n            id: 6,\n            likekounts: 0,\n            message: this._state.profilePage.messageForNewPost\n        }\n\n        this._state.profilePage.posts.push(newPost)\n\n        this.rerenderEntireTree()\n    },\n    addMessage(postMessage: string)  {\n        debugger\n        this._state.dialogsPage.messagesForMessages = postMessage\n        let newMessage: MessagesType = {\n            id: 6,\n            message: this._state.dialogsPage.messagesForMessages\n        }\n\n        this._state.dialogsPage.messages.push(newMessage)\n        this.rerenderEntireTree()\n    },\n    rerenderEntireTree() {console.log('State Changed')},\n    subscribe(observer){\n        this.rerenderEntireTree=observer\n    },\n    getState(){\n       return this._state\n    },\n    dispatch(action){\n\n\n        this._state.dialogsPage=dialogsReducer(this._state.dialogsPage, action)\n        this._state.profilePage=profileReducer(this._state.profilePage, action)\n       /* this._state.sidebar=saidbarReducer()*/\n        this.rerenderEntireTree()\n\n\n/*\n        if (action.type ===\"ADD-POST\" ){\n            this._state.profilePage.messageForNewPost = action.postText\n            let newPost: PostsTypes = {\n                id: 6,\n                likekounts: 0,\n                message: this._state.profilePage.messageForNewPost\n            }\n\n            this._state.profilePage.posts.push(newPost)\n\n            this.rerenderEntireTree()\n        } else if (action.type ===\"ADD-MESSAGE\" ){\n            this._state.dialogsPage.messagesForMessages = action.postMessage\n            let newMessage: MessagesType = {\n                id: 6,\n                message: this._state.dialogsPage.messagesForMessages\n            }\n\n            this._state.dialogsPage.messages.push(newMessage)\n            this.rerenderEntireTree()\n\n        }*/\n    }\n\n\n}\n\n\nexport default store\n\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header/header\";\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport Profile from \"./components/profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {ChangeAllAddText, StroreType} from \"./redux/store\";\r\nimport {StoreReduxType} from \"./redux/redux.store\";\r\n\r\n\r\n\r\n\r\ntype appType = {\r\n    Store: StoreReduxType\r\n    /*addPost: (postText: string) => void\r\n    addMessage: (postMessage: string) => void*/\r\n    dispatch: any\r\n\r\n\r\n}\r\n\r\nfunction App(props: appType) {\r\n    const state = props.Store.getState()\r\n    return (\r\n\r\n            <div className='app-wrapper'>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/profile' render={() => <Profile\r\n                        profilePage={state.profilePage}\r\n                        dispatch={props.dispatch}\r\n\r\n                    />}/>\r\n                    <Route path='/dialogs' render={() => <Dialogs\r\n                        dialogsPage={state.dialogsPage}\r\n                        dispatch={props.Store.dispatch.bind(props.Store)}\r\n                    />}/>\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport saidbarReducer from \"./saidbar-reduser\";\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer\n})\n\n\ntype appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer)\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\n\r\nimport  {StroreType} from \"./redux/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux.store\";\r\n\r\nconst rerenderEntireTree = () => {\r\n\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <App Store={store}\r\n                 dispatch={store.dispatch.bind(store)}\r\n\r\n            />,\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n// @ts-ignore\r\nstore.subscribe(rerenderEntireTree)\r\n\r\n/*\r\nrerenderEntireTree(store.getState())\r\nstore.subscribe(()=>{\r\n    let state=store.getState()\r\n    rerenderEntireTree(state)\r\n})\r\n*/\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};"],"sourceRoot":""}