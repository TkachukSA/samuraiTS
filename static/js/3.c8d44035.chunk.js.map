{"version":3,"sources":["components/common/paginator/Paginator.module.css","components/users/User.module.css","components/common/paginator/Paginator.tsx","assets/images/user.png","components/users/User.tsx","components/users/Users.tsx","redux/user-selectors.ts","components/users/UsersContainer.tsx"],"names":["module","exports","Paginator","props","pagesCount","Math","ceil","totalCount","pageSize","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortonNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","filter","p","map","className","currentPage","s","selectedPage","onPageChanged","User","users","u","to","id","alt","src","photos","small","userPhoto","usersPhoto","followed","disabled","folowingInProgres","some","unFolluwThunk","FolluwThunk","name","status","location","Users","getUsersS","state","usersPeges","getPageSizeS","getTotalCountS","getCurrentPageS","getIsFetchingS","isFetching","getFolowingInProgressS","folowingInProgress","UsersContainet","pageNumber","getUsersThunk","setCurrentPage","this","Preloader","setTotalUsersCount","React","Component","compose","connect","toglIsFetching"],"mappings":"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","file":"static/js/3.c8d44035.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__bOFQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"User_usersPhoto__2geQG\"};","import React, {useState} from 'react';\nimport s from './Paginator.module.css'\nimport {UsersType} from \"../../users/Users\";\n\n\nexport type PaginatorPropsType = {\n    users: Array<UsersType>\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    portionSize: number\n}\n\n\nfunction Paginator(props: PaginatorPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\n    let [portionNumber, setPortonNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\n    let rightPortionPageNumber = portionNumber * props.portionSize\n    return <div>\n        {portionNumber > 1 && <button onClick={()=>{setPortonNumber(portionNumber-1)}}>prev</button>}\n\n\n\n        {\n            pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p, i) => {\n                return <span key={i} className={props.currentPage === p ? s.selectedPage : \"\"}\n                             onClick={() => {\n                                 props.onPageChanged(p)\n                             }}>{p}</span>\n            })\n        }\n        {portionCount >portionNumber&& <button onClick={()=>{setPortonNumber(portionNumber+1)}}>next</button>}\n    </div>\n\n}\n\n\nexport default Paginator","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","import React from 'react';\nimport s from './User.module.css'\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {UsersType} from \"./Users\";\n\n\nexport type UsersPropsType = {\n    users: Array<UsersType>\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction User(props: UsersPropsType) {\ndebugger\n    return <div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                         <img alt={'photo'}\n                              src={u.photos.small !== null ? u.photos.small : userPhoto}\n                              className={s.usersPhoto}\n                         />\n                         </NavLink>\n                <div>\n                    {u.followed ?\n                        <button disabled={props.folowingInProgres.some(id => id === u.id)}\n                                onClick={() => {\n                                    props.unFolluwThunk(u.id)\n                                }}>\n                            unfollow\n                        </button>\n                        :\n                        <button disabled={props.folowingInProgres.some(id => id === u.id)}\n                                onClick={() => {\n                                    props.FolluwThunk(u.id)\n                                }}>\n\n                            follow\n                        </button>}\n                </div>\n            </div>\n   </span>\n                <div>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                    <span>\n                   <div>{u.location && u.location}</div>\n               </span>\n\n                </div>\n            </div>)\n        }\n\n\n    </div>;\n\n}\n\n\nexport default User","import React from 'react';\nimport Paginator from \"../common/paginator/Paginator\";\nimport User from \"./User\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\ndebugger\n    return <div>\n        <Paginator onPageChanged={props.onPageChanged}\n                   currentPage={props.currentPage}\n                   pageSize={props.pageSize}\n                   totalCount={props.totalCount}\n                   users={props.users}\n                   portionSize={10}\n        />\n        <User users={props.users}\n              FolluwThunk={props.FolluwThunk}\n              folowingInProgres={props.folowingInProgres}\n              unFolluwThunk={props.unFolluwThunk}\n        />\n    </div>\n}\n\n\nexport default Users","import {appStateType} from \"./redux.store\";\n\n\nexport const getUsersS = (state: appStateType)=>{\n    return  state.usersPeges.users\n}\n/*export const getUsersSelector = createSelector(getUsersS,(...arg)=>{\n    return  users\n})*/\nexport const getPageSizeS = (state: appStateType)=>{\n    return  state.usersPeges.pageSize\n}\nexport const getTotalCountS = (state: appStateType)=>{\n    return  state.usersPeges.totalCount\n}\n\nexport const getCurrentPageS = (state: appStateType)=>{\n    return  state.usersPeges.currentPage\n}\nexport const getIsFetchingS = (state: appStateType)=>{\n    return  state.usersPeges.isFetching\n}\nexport const getFolowingInProgressS = (state: appStateType)=>{\n    return  state.usersPeges.folowingInProgress\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {FolluwThunk, getUsersThunk, setCurrentPage, setTotalUsersCount, toglIsFetching, unFolluwThunk,\n} from \"../../redux/users-reduser\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {getCurrentPageS, getFolowingInProgressS, getIsFetchingS, getPageSizeS, getTotalCountS, getUsersS\n} from \"../../redux/user-selectors\";\n\n\n\nexport type mapDispathToPropsType = {\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toglIsFetching: (isFetching: boolean) => void\n    getUsersThunk: (currentPage: number, pageSize: number) => void\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\ntype mapStateToPropsType = {\n    users: any\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress: Array<string>\n}\n\nexport type UsersPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass UsersContainet extends React.Component<UsersPropsType> {\n\n\n    componentDidMount() {\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsersThunk(pageNumber, this.props.pageSize)\n        this.props.setCurrentPage(pageNumber);\n    }\n\n\n    render() {\n        debugger\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users\n                folowingInProgres={this.props.folowingInProgress}\n                unFolluwThunk={this.props.unFolluwThunk}\n                FolluwThunk={this.props.FolluwThunk}\n                currentPage={this.props.currentPage}\n                pageSize={this.props.pageSize}\n                totalCount={this.props.totalCount}\n                setTotalUsersCount={this.props.setTotalUsersCount}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n            />\n        </>\n    }\n}\n\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        users: getUsersS(state),\n        pageSize: getPageSizeS(state),\n        totalCount: getTotalCountS(state),\n        currentPage: getCurrentPageS(state),\n        isFetching: getIsFetchingS(state),\n        folowingInProgress: getFolowingInProgressS(state)\n    }\n}\n\n\nexport default compose(/*withAuthRedirect*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n}))(UsersContainet)\n\n\n\n/*const  withRedirect = withAuthRedirect(UsersContainet)\n\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n})(withRedirect)*/"],"sourceRoot":""}