{"version":3,"sources":["components/common/paginator/Paginator.module.css","components/users/User.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/Myposts/Post/Post.module.css","components/navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","redux/dialogs-reduser.ts","api/api.ts","redux/profile-reduser.ts","redux/users-reduser.ts","redux/auth-reduser.ts","redux/app-reduser.ts","redux/redux.store.ts","components/navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/formsControl/FormsControl.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.ts","components/common/paginator/Paginator.tsx","assets/images/user.png","components/users/User.tsx","components/users/Users.tsx","assets/loading/loader.gif","components/common/preloader/Preloader.tsx","redux/user-selectors.ts","components/users/UsersContainer.tsx","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Myposts/Post/Post.tsx","components/profile/Myposts/MyPosts.tsx","components/profile/Myposts/MyPostsContainer.ts","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/header/header.tsx","components/header/header.container.tsx","components/login/Login.tsx","chat/Chat.tsx","App.tsx","index.tsx","components/common/formsControl/FormsControl.module.css","chat/Chat.module.css","components/profile/Myposts/MyPosts.module.css","components/header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","dialogs","id","v1","name","messages","message","dialogsReducer","state","action","type","text","value","instance","axios","create","baseURL","withCredentials","headers","userApi","currentPage","pageSize","get","delete","post","userId","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","updatePhotos","image","authAPI","email","password","rememberMe","profile","posts","likekounts","profileReducer","newPost","users","totalCount","isFetching","folowingInProgress","usersReducer","map","u","userid","followed","filter","setCurrentPage","setTotalUsersCount","toglIsFetching","toglFolowingInProgress","setAuthUserData","data","login","isAuth","authReducer","getAuthUserData","dispatch","then","response","resultCode","initialized","appReducer","rootReducer","combineReducers","dialogsPage","profilePage","usersPeges","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","Navbar","className","s","nav","item","to","activeClassName","activeClassLink","DialogItem","props","dialog","active","Message","required","maxLength","length","Input","input","meta","children","hasError","touched","error","formControl","TextArea","Dialogs","messageElements","m","dialogsElements","d","dialogsItems","AddMessageReduxForm","onSubmit","formData","addMessage","newMessageBody","maxLength10","reduxForm","handleSubmit","Field","placeholder","validate","component","mapStateToProps","withAuthRedirect","Component","connect","compose","addMessageActoinCreator","Paginator","pagesCount","Math","ceil","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortonNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","p","selectedPage","onPageChanged","User","alt","src","photos","small","userPhoto","usersPhoto","disabled","folowingInProgres","some","unFolluwThunk","FolluwThunk","Users","Preloader","loader","getUsersS","getPageSizeS","getTotalCountS","getCurrentPageS","getIsFetchingS","getFolowingInProgressS","UsersContainet","pageNumber","getUsersThunk","this","React","items","ProfileStatus","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","Profileinfo","discriptionBlock","fullName","large","Post","MyPosts","postsElements","postsBlock","AddNewPostReduxForm","addPost","newPostBody","maxLength20","MyPostsContainer","addPostActoinCreator","Profile","ProfileContainer","params","autorisedUserId","history","getUserProfile","updateStatusAC","withRouter","Header","header","loginBlock","logoutTC","HeaderContainer","LoginReduxForm","FormsControl","loginTC","stopSubmit","_error","Chat","authId","useSelector","messange","setMessane","user","setUser","ws","setWs","h1Ref","useRef","onmessage","JSON","parse","current","scrollTo","scrollHeight","webSocket","WebSocket","chat","ref","messanges","index","photo","span2","span","userName","send","App","initializedApp","path","render","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.14f559a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__bOFQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"User_usersPhoto__2geQG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileInfo_status__31wvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2KsXO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"activeClassLink\":\"Navbar_activeClassLink__1kCFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    addMessageActoinCreatorType,\n    ChangeAllAddText,\n} from \"./store\";\nimport {v1} from \"uuid\";\n\n\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\nexport type dialogsType = {\n    id: string\n    name: string\n}\n\nexport type MessagePageType = {\n    dialogs: Array<dialogsType>\n    messages: Array<MessagesType>\n}\n\nexport const addMessageActoinCreator = (value: string):addMessageActoinCreatorType => ({\n    type: \"ADD-MESSAGE\", value})\n\n\n\nlet initialState:MessagePageType ={\n    dialogs: [\n        {id: v1(), name: \"Nastya\"},\n        {id: v1(), name: \"Vlad\"},\n        {id: v1(), name: \"Vika\"},\n        {id: v1(), name: \"Andrey\"},\n        {id: v1(), name: \"Vasia\"}\n    ],\n    messages: [\n        {id: v1(), message: \"hi how is your programmnig\"},\n        {id: v1(), message: \"hi, its ok\\\"\"},\n        {id: v1(), message: \"Good\"},\n        {id: v1(), message: \"ok\"},\n        {id: v1(), message: \"yo\"}\n    ]\n}\n\n\nfunction dialogsReducer(state:MessagePageType = initialState, action:ChangeAllAddText):MessagePageType {\n    switch (action.type) {\n        case \"ADD-MESSAGE\":\n            let text = action.value\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: text}],\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default dialogsReducer","import axios from \"axios\";\n\nimport ss from '../assets/images/user.png'\n\n\nconst instance= axios.create({\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers:{\n        \"API-KEY\": \"7866738e-c5bf-440e-864d-4cc467150876\"\n    }\n})\n\n\nexport const userApi = {\n    getUsers(currentPage: number, pageSize:number){\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n    },\n    getUnFollow(id: number){\n     return  instance.delete(`follow/${id}`)\n\n    },\n    getFollow(id: number){\n        return  instance.post(`follow/${id}`)\n\n    },\n    getProfile(userId: number){\n        console.warn('Obsolete method')\n        return  profileAPI.getProfile(userId)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: number){\n        return  instance.get(`profile/` + userId)\n    },\n    getStatus(userId: number){\n        return  instance.get(`profile/status/`+ userId )\n    },\n    updateStatus(status: string){\n        return instance.put(`profile/status`, { status: status }, );\n    },\n    updatePhotos(image: string){\n        return instance.put(`profile/photo`, {image: image})\n    }\n}\n/*debugger\nprofileAPI.updatePhotos(ss)*/\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post(`/auth/login`, {email ,password, rememberMe })\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}","import {\n    PostsTypes,\n} from \"./store\";\nimport {v1} from \"uuid\";\nimport {profileAPI, userApi} from \"../api/api\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport type setUsersProfileType = {\n    type: \"SET_USER_PROFILE\"\n    profile: newProfileType\n}\nexport type AddPostActionType = {\n    type: \"ADD-POST\",\n    value: string\n}\nexport type setStatusActionType = {\n    type: \"SET_STATUS\"\n    status: string\n}\nexport type updateStatusActionType = {\n    type: \"UPDATE_STATUS\"\n    status: string\n}\n\nexport type ActionPageType =\n    | AddPostActionType\n    | setUsersProfileType\n    | setStatusActionType\n    | updateStatusActionType\n\n\nexport type newProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type newProfilePageType = {\n    profile: newProfileType | null\n    posts: Array<PostsTypes>\n    status: string\n}\n\n\nlet initialState: newProfilePageType = {\n    profile: null,\n    status: '',\n    posts: [\n        {id: v1(), message: 'Hi, how are you*?', likekounts: 12},\n        {id: v1(), message: 'its my first post', likekounts: 33},\n        {id: v1(), message: 'go in iron', likekounts: 333},\n        {id: v1(), message: 'its my life', likekounts: 333}\n    ],\n}\n\n\nconst profileReducer = (state: newProfilePageType = initialState, action: ActionPageType): newProfilePageType => {\n    switch (action.type) {\n        case \"ADD-POST\":\n            let text = action.value\n            let newPost: PostsTypes = {\n                id: v1(),\n                likekounts: 0,\n                message: text\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n\n        case \"SET_USER_PROFILE\":\n            return {...state, profile: action.profile}\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        case \"UPDATE_STATUS\":\n            return {...state, status: action.status}\n\n        default:\n            return state\n    }\n\n}\n\nexport const addPostActoinCreator = (value: string): AddPostActionType => ({\n        type: \"ADD-POST\", value\n    }\n)\n\nexport const setUsersProfile = (profile: newProfileType): setUsersProfileType => ({\n    type: \"SET_USER_PROFILE\",\n    profile\n})\n\nexport const setStatus = (status: string): setStatusActionType => ({\n    type: 'SET_STATUS', status\n})\nexport const updateStatusAC = (status: string): updateStatusActionType => ({\n    type: 'UPDATE_STATUS', status\n})\n\n\n\nexport default profileReducer\n\n\nexport const getUserProfile = (userId: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        userApi.getProfile(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setUsersProfile(response.data))\n            })\n    }\n}\n\nexport const getStatus = (userId: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.getStatus(+userId)\n            .then((response: AxiosResponse<any>) => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatus = (status: string) => {\n    return (dispatch: (action: ActionPageType) => ActionPageType) => {\n        profileAPI.updateStatus(status)\n            .then((response: AxiosResponse<any>) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(updateStatusAC(status))\n                }\n            })\n    }\n}\n\n\n","import {UsersType} from \"../components/users/Users\";\nimport {userApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\n\nexport type UsersPageType={\n    users:Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress:Array<string>\n}\nexport type folowActionType = { type: \"FOLLOW\", userid: string  }\nexport type unFolowActionType = { type: \"UN-FOLLOW\", userid: string }\nexport type setUsersActionType = { type: \"SETUSERS\", users: Array<UsersType> }\n\nexport type setCurrentPageActionType = { type: \"SET-CURRENT-PAGE\", currentPage: number}\nexport type setTotalUsersCountActionType = { type: \"SET-TOTAL-USERS-COUNT\", totalCount: number }\nexport type toglIsFetchingActionType = { type: \"TOGL-IDFETCHING\", isFetching: boolean }\nexport type toglFolowingInProgressActionType = { type: \"TOGL-IS-FOLLOWING-PROGRESS\", isFetching: boolean , userId: string}\n\n\n\n\n\nexport type ActionUserType= folowActionType\n    | unFolowActionType\n    | setUsersActionType\n    | setCurrentPageActionType\n    | setTotalUsersCountActionType\n    | toglIsFetchingActionType\n    | toglFolowingInProgressActionType\n\n\n\nlet initialState: UsersPageType  = {\n    users: [],\n    pageSize: 10,\n    totalCount: 100,\n    currentPage: 1,\n    isFetching: false,\n    folowingInProgress: []\n}\n\n\nconst usersReducer = (state: UsersPageType  = initialState, action: ActionUserType): UsersPageType => {\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UN-FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (action.userid === u.id) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })}\n        case \"SETUSERS\": {\n            return {...state, users: action.users }\n    }\n        case \"SET-CURRENT-PAGE\":{\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"SET-TOTAL-USERS-COUNT\":{\n            return {...state, totalCount: action.totalCount}\n        }\n        case \"TOGL-IDFETCHING\":{\n            return {...state, isFetching: action.isFetching}\n        }\n        case \"TOGL-IS-FOLLOWING-PROGRESS\":{\n            return {\n                ...state,\n                folowingInProgress: action.isFetching\n                    ? [...state.folowingInProgress, action.userId]\n                    : state.folowingInProgress.filter(id => id != action.userId)\n            }}\n\n    }\n\n    return state\n\n}\n\n\n\nexport default usersReducer\n\nexport const follow = (userid: string):folowActionType => ({\n    type: \"FOLLOW\",\n    userid: userid\n})\nexport const unFolow = (userid: string): unFolowActionType => ({\n    type: \"UN-FOLLOW\",\n    userid: userid\n})\nexport const setUsers = (users: Array<UsersType>): setUsersActionType => ({\n    type: \"SETUSERS\",\n    users: users\n})\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\n    type: \"SET-CURRENT-PAGE\",\n    currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountActionType => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalCount: totalCount\n})\nexport const toglIsFetching = (isFetching: boolean): toglIsFetchingActionType => ({\n    type: \"TOGL-IDFETCHING\",\n    isFetching: isFetching\n})\nexport const toglFolowingInProgress = (isFetching: boolean, userId: string): toglFolowingInProgressActionType => ({\n    type: \"TOGL-IS-FOLLOWING-PROGRESS\",\n    isFetching, userId\n})\n\n\nexport const getUsersThunk=(currentPage: number, pageSize: number)=>{\n    return (dispatch: Dispatch)=>{\n        dispatch(toglIsFetching(true))\n        dispatch(setCurrentPage(currentPage))\n        userApi.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(toglIsFetching(false))\n                dispatch(setUsers(response.data.items))\n                dispatch(setTotalUsersCount(response.data.totalCount))\n\n            })\n\n    }\n}\nexport const unFolluwThunk=(userId: string)=>{\n\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getUnFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFolow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n\n    }\n}\nexport const FolluwThunk=(userId: string)=>{\n    return (dispatch: (action: ActionUserType)=> ActionUserType )=>{\n        dispatch(toglFolowingInProgress(true,userId))\n        userApi.getFollow(+userId)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(follow(userId))}\n                dispatch(toglFolowingInProgress(false,userId))\n            })\n    }\n}\n","import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from 'redux-form';\n\nexport type setUserDataActionType = ReturnType<typeof setAuthUserData>\nexport type ActionAuthType = setUserDataActionType\nexport type AuthPageType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\nexport const setAuthUserData = (data: AuthPageType) => ({type: \"SET-USER-DATA\", data} as const)\n\n\nlet initialState: AuthPageType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\n\nconst authReducer = (state: AuthPageType = initialState, action: ActionAuthType): AuthPageType => {\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {...state, ...action.data}\n    }\n    return state\n\n}\n\n\nexport default authReducer\n\nexport const getAuthUserData = () => {\n    return (dispatch: Dispatch) => {\n        authAPI.me()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data\n                    dispatch(setAuthUserData({id, email, login, isAuth: true}))\n                }\n            })\n    }\n}\n\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.login(email, password, rememberMe)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\n                    dispatch(stopSubmit(\"login\", {_error: message}))\n                }\n            })\n    }\n}\n\nexport const logoutTC = () => {\n    return (dispatch: Dispatch<any>) => {\n        authAPI.logout()\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData({login: null, id: null, email: null, isAuth: false}))\n                }\n            })\n    }\n}\n","import {Dispatch} from \"redux\";\nimport {getAuthUserData} from \"./auth-reduser\";\n\n\nexport type initializedSucsessActionType = ReturnType<typeof initializedSucsessAction>\n\n\nexport const initializedSucsessAction = () => ({type: \"INITIALIZED_SUCCESS\"} as const)\n\n\ntype appReducerType = {\n    initialized: boolean\n}\n\nlet initialState = {\n    initialized: false\n}\n\n\nconst appReducer = (state: appReducerType = initialState, action: initializedSucsessActionType): appReducerType => {\n\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\": {\n            return {...state, initialized: true }\n        }\n    }\n    return state\n\n}\n\n\nexport default appReducer\n\n\nexport const initializedApp = () => (dispatch: Dispatch<any>) => {\n    const promise = dispatch(getAuthUserData())\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSucsessAction())\n        })\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport { reducer as formReducer } from 'redux-form'\nimport dialogsReducer from \"./dialogs-reduser\";\nimport profileReducer from \"./profile-reduser\";\nimport usersReducer from \"./users-reduser\";\nimport authReducer from \"./auth-reduser\";\nimport thunk from 'redux-thunk'\nimport appReducer from \"./app-reduser\";\n\n\n\n\nconst rootReducer = combineReducers({\n    dialogsPage: dialogsReducer,\n    profilePage: profileReducer,\n    usersPeges: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\n\nexport type appStateType = ReturnType<typeof rootReducer>\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type StoreReduxType= typeof  store\n\n\nexport default store","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\"  activeClassName={s.activeClassLink}>Profile</NavLink>\n            </div>\n\n            <div className={s.item}>\n            <NavLink to=\"/dialogs\" activeClassName={s.activeClassLink}>Messages</NavLink>\n        </div>\n            <div className={s.item}>\n                <NavLink to=\"/users\" activeClassName={s.activeClassLink}>Users</NavLink>\n            </div>\n\n            <div className={s.item}>\n                <NavLink to=\"/chat\" activeClassName={s.activeClassLink}>Chat</NavLink>\n            </div>\n\n\n            <div className={s.item}>\n            <a>News</a>\n        </div>\n            <div className={s.item}>\n            <a>Music</a>\n        </div>\n            <div className={s.item}>\n            <a>Settings</a>\n        </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\"\n\ntype MessageType={\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={s.dialog}>{props.message}</div>)\n\n}\n\n\nexport default Message\n","export const required = (value: string)=>{\n    if (value) {\n        return undefined\n    }\n    else return \"Field is required\";\n}\n\n\n\n\nexport const maxLength = (maxLength:number) => (value:string) => {\n    if (value){\n        if (value.length > maxLength) return 'Max length is ' + maxLength + ' symbols '\n        return undefined\n    }\n\n}","import React from 'react';\nimport s from './FormsControl.module.css'\n\ntype FormsControlType = {\n    input: any\n    meta: any\n}\n\nexport const Input: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const TextArea: React.FC<FormsControlType> = ({input, children, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\n","import React from 'react';\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/dialogs-reduser\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formsControl/FormsControl\";\n\n\nexport type DialogsType = {\n    dialogsPage: MessagePageType\n    addMessage: (value: string) => void\n    changeHandler: (body: any) => void\n}\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst Dialogs = (props: DialogsType) => {\n    let messageElements = props.dialogsPage.messages.map((m) => <Message message={m.message} key={m.id}/>)\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n\n\n    const onSubmit = (formData: FormDataType) => {\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div> {messageElements}</div>\n                <AddMessageReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Dialogs\n\n\nconst maxLength10 = maxLength(10)\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'}\n                       validate={[maxLength10, required]}\n                       name={'newMessageBody'}\n                       component={TextArea}/>\n            </div>\n            <div>\n                <button>add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: \"AddMessageForm\"})(AddMessageForm)","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\nimport {UsersPropsType} from \"../components/users/Users\";\nimport {ProfileType} from \"../components/profile/Profile\";\nimport {DialogsType} from \"../components/Dialogs/Dialogs\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToProps = (state: appStateType):mapStateToPropsType => ({\n        isAuth: state.auth.isAuth\n})\n\ntype PropsType = DialogsType | UsersPropsType | ProfileType\n\nexport const withAuthRedirect = (Component: any) => {\n\n\n    const RedirectComponent = (props: PropsType & mapStateToPropsType) => {\n\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...props}/>\n\n    };\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\n","import {ChangeAllAddText} from \"../../redux/store\";\nimport {addMessageActoinCreator, MessagePageType} from \"../../redux/dialogs-reduser\";\nimport Dialogs from \"./Dialogs\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapDispathToPropsType = {\n    addMessage: (value: string) => void\n}\ntype mapStateToPropsType = {\n    dialogsPage: MessagePageType,\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n\n}\n\nlet mapDispathToProps = (dispatch: (action: ChangeAllAddText) => void): mapDispathToPropsType => {\n    return {\n        addMessage: (value: string) => {\n            dispatch(addMessageActoinCreator(value))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps), withAuthRedirect\n)(Dialogs)\n\n\n/*const  withRedirect = withAuthRedirect(Dialogs)\n\n\nconst DialogsContainer = connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, mapDispathToProps)(withRedirect)\n\n\nexport default DialogsContainer*/","import React, {useState} from 'react';\nimport s from './Paginator.module.css'\nimport {UsersType} from \"../../users/Users\";\n\n\nexport type PaginatorPropsType = {\n    users: Array<UsersType>\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    portionSize: number\n}\n\n\nfunction Paginator(props: PaginatorPropsType) {\n\n    let pagesCount = Math.ceil(props.totalCount / props.pageSize);\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\n    let [portionNumber, setPortonNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\n    let rightPortionPageNumber = portionNumber * props.portionSize\n    return <div>\n        {portionNumber > 1 && <button onClick={()=>{setPortonNumber(portionNumber-1)}}>prev</button>}\n\n\n\n        {\n            pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p, i) => {\n                return <span key={i} className={props.currentPage === p ? s.selectedPage : \"\"}\n                             onClick={() => {\n                                 props.onPageChanged(p)\n                             }}>{p}</span>\n            })\n        }\n        {portionCount >portionNumber&& <button onClick={()=>{setPortonNumber(portionNumber+1)}}>next</button>}\n    </div>\n\n}\n\n\nexport default Paginator","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","import React from 'react';\nimport s from './User.module.css'\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {UsersType} from \"./Users\";\n\n\nexport type UsersPropsType = {\n    users: Array<UsersType>\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction User(props: UsersPropsType) {\ndebugger\n    return <div>\n\n        {\n            props.users.map(u => <div key={u.id}>\n\n  <span>\n            <div>\n                       <NavLink to={'/profile/' + u.id}>\n                         <img alt={'photo'}\n                              src={u.photos.small !== null ? u.photos.small : userPhoto}\n                              className={s.usersPhoto}\n                         />\n                         </NavLink>\n                <div>\n                    {u.followed ?\n                        <button disabled={props.folowingInProgres.some(id => id === u.id)}\n                                onClick={() => {\n                                    props.unFolluwThunk(u.id)\n                                }}>\n                            unfollow\n                        </button>\n                        :\n                        <button disabled={props.folowingInProgres.some(id => id === u.id)}\n                                onClick={() => {\n                                    props.FolluwThunk(u.id)\n                                }}>\n\n                            follow\n                        </button>}\n                </div>\n            </div>\n   </span>\n                <div>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                    <span>\n                   <div>{u.location && u.location}</div>\n               </span>\n\n                </div>\n            </div>)\n        }\n\n\n    </div>;\n\n}\n\n\nexport default User","import React from 'react';\nimport Paginator from \"../common/paginator/Paginator\";\nimport User from \"./User\";\n\n\nexport type UsersType = {\n    name: string\n    id: string\n    followed: boolean\n    uniqueUrlName: null | string\n    status: string | null\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n    location: {\n        contry: string\n        city: string\n    }\n}\n\nexport type UsersPropsType = {\n    users: Array<UsersType>\n    setTotalUsersCount: (totalCount: number) => void\n    onPageChanged: (pageNumber: number) => void\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    folowingInProgres: Array<string>\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\n\nfunction Users(props: UsersPropsType) {\ndebugger\n    return <div>\n        <Paginator onPageChanged={props.onPageChanged}\n                   currentPage={props.currentPage}\n                   pageSize={props.pageSize}\n                   totalCount={props.totalCount}\n                   users={props.users}\n                   portionSize={10}\n        />\n        <User users={props.users}\n              FolluwThunk={props.FolluwThunk}\n              folowingInProgres={props.folowingInProgres}\n              unFolluwThunk={props.unFolluwThunk}\n        />\n    </div>\n}\n\n\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","import React from 'react';\nimport loader from \"../../../assets/loading/loader.gif\";\n\n\n const Preloader = () => {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\nexport default Preloader\n","import {appStateType} from \"./redux.store\";\n\n\nexport const getUsersS = (state: appStateType)=>{\n    return  state.usersPeges.users\n}\n/*export const getUsersSelector = createSelector(getUsersS,(...arg)=>{\n    return  users\n})*/\nexport const getPageSizeS = (state: appStateType)=>{\n    return  state.usersPeges.pageSize\n}\nexport const getTotalCountS = (state: appStateType)=>{\n    return  state.usersPeges.totalCount\n}\n\nexport const getCurrentPageS = (state: appStateType)=>{\n    return  state.usersPeges.currentPage\n}\nexport const getIsFetchingS = (state: appStateType)=>{\n    return  state.usersPeges.isFetching\n}\nexport const getFolowingInProgressS = (state: appStateType)=>{\n    return  state.usersPeges.folowingInProgress\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {FolluwThunk, getUsersThunk, setCurrentPage, setTotalUsersCount, toglIsFetching, unFolluwThunk,\n} from \"../../redux/users-reduser\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {getCurrentPageS, getFolowingInProgressS, getIsFetchingS, getPageSizeS, getTotalCountS, getUsersS\n} from \"../../redux/user-selectors\";\n\n\n\nexport type mapDispathToPropsType = {\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toglIsFetching: (isFetching: boolean) => void\n    getUsersThunk: (currentPage: number, pageSize: number) => void\n    unFolluwThunk: (userId: string) => void\n    FolluwThunk: (userId: string) => void\n}\n\ntype mapStateToPropsType = {\n    users: any\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    folowingInProgress: Array<string>\n}\n\nexport type UsersPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass UsersContainet extends React.Component<UsersPropsType> {\n\n\n    componentDidMount() {\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsersThunk(pageNumber, this.props.pageSize)\n        this.props.setCurrentPage(pageNumber);\n    }\n\n\n    render() {\n        debugger\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users\n                folowingInProgres={this.props.folowingInProgress}\n                unFolluwThunk={this.props.unFolluwThunk}\n                FolluwThunk={this.props.FolluwThunk}\n                currentPage={this.props.currentPage}\n                pageSize={this.props.pageSize}\n                totalCount={this.props.totalCount}\n                setTotalUsersCount={this.props.setTotalUsersCount}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n            />\n        </>\n    }\n}\n\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        users: getUsersS(state),\n        pageSize: getPageSizeS(state),\n        totalCount: getTotalCountS(state),\n        currentPage: getCurrentPageS(state),\n        isFetching: getIsFetchingS(state),\n        folowingInProgress: getFolowingInProgressS(state)\n    }\n}\n\n\nexport default compose(/*withAuthRedirect*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n}))(UsersContainet)\n\n\n\n/*const  withRedirect = withAuthRedirect(UsersContainet)\n\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    setCurrentPage,\n    setTotalUsersCount,\n    toglIsFetching,\n    getUsersThunk,\n    unFolluwThunk,\n    FolluwThunk\n})(withRedirect)*/","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)};\n\n        const deactivateEditMode = () => {\n            setEditMode(false)\n            props.updateStatus(status);\n        }\n\n        return (\n            <div>\n                {!editMode &&\n                <div>\n                    <span onDoubleClick={() => setEditMode(true)}>{props.status || \"-------\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}/>\n                </div>\n                }\n            </div>\n        )\n\n}\n","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {newProfileType} from \"../../../redux/profile-reduser\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\n\n\ntype Profileinfotype = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\n\nconst Profileinfo = (props: Profileinfotype) => {\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n\n            <div className={s.discriptionBlock}>\n                <div>{props.profile.fullName}</div>\n                <img src={props.profile.photos.large}/>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\nexport default Profileinfo","import React from 'react';\nimport s from'./Post.module.css'\n\n\ntype PostProps = {\n    id: string\n    message: string\n    likekounts: number\n}\n\nconst Post = (props: PostProps) => {\n\n    return (\n        <div className={s.item}>\n            <img alt={'post'} src=\"https://vignette.wikia.nocookie.net/castle-rock/images/9/9d/Stephen_King._Art_by_CoalRye.jpg/revision/latest?cb=20180716011208&path-prefix=ru\"/>\n            {props.message}\n\n            <div>\n            <span>{props.likekounts} like</span>\n            </div>\n        </div>\n\n\n)\n}\nexport default Post","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsTypes} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formsControl/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostsTypes>\n    addPost: (value: string) => void\n\n\n}\n\nconst MyPosts = (props: MyPostsType) => {\n\n    let postsElements = props.posts.map(p => <Post message={p.message} likekounts={p.likekounts} id={p.id} key={p.id}/>)\n\n    const addPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddNewPostReduxForm onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    )\n}\nexport default MyPosts\n\ntype FormDataType = {\n    newPostBody: string\n}\nconst maxLength20 = maxLength(20)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter new post'} validate={[maxLength20, required]} name={'newPostBody'}\n                       component={TextArea}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'AddNewPostForm'})(AddNewPostForm)","\nimport {appStateType} from \"../../../redux/redux.store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nimport {ActionPageType, addPostActoinCreator,} from \"../../../redux/profile-reduser\";\n\n\ntype mapDispathToPropsType={\n    addPost: (value: string)=>void\n\n}\n\nlet mapStateToProps=(state:appStateType)=>{\n    return{\n\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispathToProps=(dispatch:(action: ActionPageType) => void ):mapDispathToPropsType=>{\n    return{\n        addPost: (value: string)=>{dispatch(addPostActoinCreator(value))},\n    }\n}\n\nconst MyPostsContainer=connect(mapStateToProps, mapDispathToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react';\nimport Profileinfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\nimport {newProfileType} from \"../../redux/profile-reduser\";\n\n\nexport type ProfileType = {\n    profile: newProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nconst Profile = (props: ProfileType) => {\n\n    return (\n        <div>\n            <Profileinfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\nexport default Profile\n\n\n\n\n","import React from 'react';\nimport {appStateType} from \"../../redux/redux.store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, newProfileType, updateStatus} from \"../../redux/profile-reduser\";\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    profile: newProfileType | null\n    status: string\n    autorisedUserId: any\n    isAuth: boolean\n}\ntype mapDispathToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\ntype PathParamType = {\n    userId: string\n}\n\nexport type ProfilePropsType = mapStateToPropsType & mapDispathToPropsType\n\ntype PropsType = RouteComponentProps<PathParamType> & ProfilePropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorisedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<any>(connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>\n(mapStateToProps, {getUserProfile, getStatus, updateStatus}), withAuthRedirect, withRouter)(ProfileContainer)\n\n/*\n\n//функция compose заменяет этот код:\nconst  withRedirect = withAuthRedirect(ProfileContainer)\n\n// для отображения на какой странице профиля находимся\nlet WithUrlDataContainerComponent= withRouter(withRedirect)\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType,{}, appStateType>( mapStateToProps, {\n    getUserProfile,\n    //setUsersProfile\n})(WithUrlDataContainerComponent)\n*/\n","import React from 'react';\nimport s from \"./Header.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\n\ntype HeaderType={\n    isAuth: boolean\n    login: string | null\n    logoutTC: ()=>void\n\n}\n\n\nconst Header = (props: HeaderType) => {\n    return (\n        <header className={s.header}>\n            <img alt={'header'} src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n            <div className={s.loginBlock}>\n                {props.isAuth?\n                    <div>{props.login} --- <button onClick={props.logoutTC}>Logout</button></div>\n                    : <NavLink to=\"/login\">Login</NavLink>}\n            </div>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\nimport Header from \"./header\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {connect} from \"react-redux\";\nimport {logoutTC} from \"../../redux/auth-reduser\";\n\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n}\ntype mapDispathToPropsType = {\n    logoutTC: () => void\n}\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n\n\n    render() {\n        return <Header {...this.props}/>\n    }\n\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    logoutTC\n})(HeaderContainer)","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/formsControl/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reduser\";\nimport {appStateType} from \"../../redux/redux.store\";\nimport {Redirect} from \"react-router-dom\";\nimport s from '../common/formsControl/FormsControl.module.css'\n\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n\n}\n\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'email'} validate={[required]} name={'email'} component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={'password'} validate={[required]} name={'password'} component={Input}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={'rememberMe'} component={Input}/>\n            </div>\n            {props.error && <div className={s.FormsControl}>\n                {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\n\nfunction Login(props: mapDispathToPropsType & mapStateToPropsType) {\n\n    const onSubmit = (formData: FormDataType) => {\n        props.loginTC(formData.email, formData.password, formData.rememberMe)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <div>Login</div>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n\n}\n\ntype mapDispathToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\n}\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n\n}\nexport default connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {loginTC})(Login)","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\"\nimport s from './Chat.module.css'\nimport {useSelector} from \"react-redux\";\nimport {appStateType} from \"../redux/redux.store\";\n\ntype UserType = {\n    message: string\n    photo: string | undefined\n    userId: number\n    userName: string\n}\n\nexport const Chat = function () {\n\n    const authId = useSelector<appStateType, number | null>(state => state.auth.id)\n    let [messange, setMessane] = useState('')\n    let [user, setUser] = useState<UserType[]>([])\n    let [ws, setWs] = useState<WebSocket>()\n\n    const h1Ref = useRef<HTMLHeadingElement>(null)\n\n\n// 3. в объекте вс приходит свойство onmessage в нем находится введеный текст\n// 4. сзздаем из него объект и делаем копью нового сообщения и с старых сообщений\n\n    if (ws) {\n        ws.onmessage = (messange) => {\n            debugger\n            let messages = JSON.parse(messange.data)\n            setUser([...user, ...messages])\n            if (h1Ref && h1Ref.current) {\n                h1Ref.current.scrollTo(0, h1Ref.current.scrollHeight)\n            }\n        }\n    }\n\n//1. делаем запрос в wss\n//2. если запрос пришел сетаем его\n    useEffect(() => {\n        let webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n        if (webSocket) {\n            setWs(webSocket)\n        }\n    }, [])\n\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessane(e.currentTarget.value)\n    }\n\n    const onMessange = () => {\n        if (ws) {\n            ws.send(messange)\n            setMessane('')\n        }\n    }\n\n    return (<div className={s.chat}>\n\n        <div>\n            <div ref={h1Ref} className={s.messanges}>\n                {user.map((u, index) => <div key={index} className={s.messange}>\n                        <img className={s.usersPhoto} src={u.photo}/><b><span\n                        className={u.userId === authId ? s.span2 : s.span}>{u.userName}</span></b>\n                        <span>{u.message}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n        <div>\n            <textarea value={messange} onChange={onMessageChange}/>\n            <button onClick={onMessange}>Send</button>\n        </div>\n    </div>)\n\n}\n\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainet from \"./components/users/UsersContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport HeaderContainer from \"./components/header/header.container\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from \"./redux/redux.store\";\nimport {compose} from \"redux\";\nimport {initializedApp} from \"./redux/app-reduser\";\nimport Preloader from \"./components/common/preloader/Preloader\";\nimport {Chat} from \"./chat/Chat\";\n\n\ntype mapDispathToPropsType = {\n    initializedApp: () => void\n}\n\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\n\ntype HeaderPropsType = mapStateToPropsType & mapDispathToPropsType\n\n\nclass App extends React.Component<HeaderPropsType> {\n\n\n    componentDidMount() {\n        this.props.initializedApp()\n\n    }\n\n    render() {\n\n        {\n            if (!this.props.initialized) {\n                return <Preloader/>\n            }\n        }\n\n\n        return (\n\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className=\"app-wrapper-content\">\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainet/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/chat' render={() => <Chat/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state: appStateType): mapStateToPropsType => {\n    return {\n\n        initialized: state.app.initialized\n    }\n}\n\n\n/*export default compose(withRouter, connect(null,{\n    getAuthUserData})) (App)*/\n/*type PathParamsType = {\n    param1: string,\n}\n\n// Your component own properties\ntype PropsType = RouteComponentProps<PathParamsType> & {\n    someString: string,\n}*/\n\n\nexport default compose(/*withRouter*/connect<mapStateToPropsType, mapDispathToPropsType, {}, appStateType>(mapStateToProps, {\n    initializedApp\n}))(App)","import React, {useEffect} from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux'\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux.store\";\nimport App from \"./App\";\n\nconst rerenderEntireTree = () => {\n\n    ReactDOM.render(\n      \n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>,\n        </BrowserRouter>,\n        document.getElementById('root'));\n}\n\n\n\n\nrerenderEntireTree()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__P0OFh\",\"error\":\"FormsControl_error__1g0kt\",\"FormsControl\":\"FormsControl_FormsControl__3L67z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Chat_usersPhoto__1XzaW\",\"messanges\":\"Chat_messanges__cYBo0\",\"chat\":\"Chat_chat__fhiBV\",\"messange\":\"Chat_messange__10FAU\",\"span\":\"Chat_span__21kzV\",\"span2\":\"Chat_span2__3ztus\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1aryQ\",\"posts\":\"MyPosts_posts__1q9rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};"],"sourceRoot":""}